------

BUILDING.TXT -- How to Build GNOME SlackBuild for Slackware

Last Updated: June 1 2010 (steve@gnomeslackbuild.org)

GNOME SlackBuild (GSB) offers two things: for those who want the simplicity of
installing binaries, we offer a full assortment of pre-build packages suitable
for Slackware and Slackware64;  for those who prefer to 'roll their own'
packages, who want to customise or tweak their build settings and optimise, we
also offer our complete system to build system and SlackBuild scripts.

This document provides information on how to use the GSB build system to
produce your own packages of GNOME.  Included in the GSB build system are all
the SlackBuilds and required files to build a package, a source fetcher and
several other tools which are used to create a binary tree of GSB.

This is designed with the advanced user in mind, and a full build of all the
packages can take several hours (or days, depending on your build machine).  We
of course recommend you use the binary distribution.

     <http://gnomeslackbuild.org>

------

Table of Contents

   1. Before You Begin
   2. Your build machine
          2.A.  Tag Files
          2.B.  Full Installation
   2. Obtaining the GNOME SlackBuild Source
   3. Running the buildgsb script.
          3.A.  Configure gsb.options
          3.B.  buildlist.txt and buildgsb options.
		3.B.1  Adding custom packages from SlackBuilds.org.
		3.B.2  Running buildgsb.
   4. Finishing the build and starting GSB
   5. What do I do if I find errors or bugs?

   APPENDIX A. Customising the Build Environment
   APPENDIX B. SlackBuild Arguments

-----

   1. Before You Begin

   This version of GSB is designed to build packages using:
       Slackware 13.1
       Slackware64 13.1

   If you are trying to build GSB on systems other than the above you will
encounter problems during the build, usually with regards to versions of
required packages. You can of course attempt to make it work, but you're on
your own. :^) However, if you do manage to get GSB built on other versions,
please let us know what modifications you had to make to the build system in
order to do so -- if those changes can be integrated into our build system, you
may find those versions supported out of the box in our future releases.  Any
notes would also be useful to other users.

-----
   
   2. Your build machine

   2.A.  Tag Files

   When we build the public version of GSB, we use a strictly controlled base
of packages to build the binary packages for the project using a Slackware
'tagset'. This way, we only install the minimum packages required to perform a
build.  We work from a set of 'tagfiles' which specify exactly which packages
get installed into our build environment.  We have included our tagfiles set in
the tagfiles/ directory for reference.  You can use them when doing a fresh
install of Slackware, which has the option in the installer menu to use a set
of 'tagfiles'.  Point the installer to this directory, and you will easily
install the same set of packages we use on our own build machine.

   2.B.  Full Install

   If it comes to building your own packages it is doubtful your build will
succeed if you do not have every package marked with an "ADD" in our tagfiles
installed on your system.  Those packages marked "ADD" form the basis of our
build requirements -- any missing packages from your system will likely cause
the build to stop.  If you don't want to use the tagfiles, then we recommend
you have a full installation of Slackware or Slackware64, and you should not
have any problem doing a build. However, the resulting packages may have more
dependencies than indicated in our slack-required files (because many of the
sources will find extra libraries when being configured and automatically link
against them).  If you do not plan on distributing your binaries, this is
perfectly fine.

-----

2. Obtaining the GNOME SlackBuild Source Code

   You can easily grab our source tree using git:

       $ git clone git://github.com/gnomeslackbuild/gsb-build-system
   
   This will grab the full source tree and all available tagged branches.  It
will default to the master branch which is the latest cutting edge tree.  You
can view a list of available 'versions' of GSB by running:

       $ git branch -r

   Then choose a branch which best fits your system, and check it out:

       $ git checkout gsb-2.30.1_slackware-13.1
       $ git pull (Just to ensure your tree is up-to-date)

   If you want to use the most cutting edge tree, use the 'master' branch,
however we recommend if you're building GSB for a non -current Slackware, you
stick with a versioned branch.  See BRANCHES.TXT in this directory for more
details.

-----

3. Quick Start Guide

   You must be root in order to build GSB. We do not host any GNOME source
tarballs on our git sever, and so you will need to download each package source
as you progress in the build.  You will need an active Internet connection to
perform the build.

   -----
    
   3.A.  Configure gsb.options

   Before beginning, make sure to configure a gsb.options file.  You can copy
over the gsb.options.sample and modify accordingly.  You will need to change
the TMP and PKGDEST variables to point to locations which have a lot of
disk space -- we would recommend at least over 2GB free, even more if you plan
on building OpenOffice. You can also modify your ARCH and TUNE.  If you want
even more finely tuned build options, see below Appendix A. 

   -----

   3.B.  buildlist.txt and buildgsb options.

      Here is a list of important files you may wish to examine first:

   .
   |
   |-- build/             This is the main build directory.
   |   |
   |   |-- buildgsb       A basic HOWTO to use our source SlackBuilds.
   |   |-- BUILDING.TXT   This file.
   |   |-- BRANCHES.TXT   This file details our GIT branches.
   |   |-- buildgsb       The main build script.
   |   `-- gsb.options    This file is read in by buildgsb.
   |
   `-- src/               Source directory for our main sets.
      |
      `-- buildlist.txt   This is the full list of packages which we build. 

        -----

        3.B.1  Adding extra packages from SlackBuilds.org
     
   You may wish to examine the `buildlist.txt' and comment any unwanted
packages out. Be aware that some packages are required, so if you comment out
too many, things may fail to build.  

   On the other hand, this allows you to easily add additional packages should
you want extra functionality.  For example, you can grab any source package
from SlackBuilds.org, keeping the SlackBuild, slack-required, and package .info
file.  Simply add it into any logical set and update the buildlist.txt.  Voila,
GSB will integrate it into the build system. For example, if you wanted iPod fs
support in your GSB gvfs package, simply grab the libimobiledevice and usbdemux
packages, or create them, insert them in the buildlist.txt before gvfs, and
upon your finished build your GSB build will have iPod mounting capabilities.
Neat, huh? :^)

        -----

	3.B.2  Running buildgsb.

   The buildgsb script has several options which effect the whole build
process.  Normally, however, none of those options are required for a build.
You are advised not to use them unless you are a developer.  The options are
explained in detail in Appendix B.

   Usually the buildgsb will need to replace the standard 'glib2' and 'gtk+2'
packages. Please look at the SLACKWARE_REPLACED_PACKAGES.TXT for more details.
buildgsb (and certain SlackBuilds) will remove (using removepkg) any such
packages which need to be updated.  The new (updated) package from GSB will
then be built and installed. Now go ahead and run the build:

    $ cd build/ 
    $ ./buildgsb

   If the build fails for some reason, you can correct the error and re-run the
'./buildgsb' command. The build system will continue from where it failed, not
restart the whole process again.  At the end of the build process you will have
a full copy of GSB installed on your system ready to go, and a copy of the
completed GSB binary package tree in $PKGDEST.

-----

4. Finishing the build and starting GSB

   Starting the GSB GNOME environment will depend on how you start your current
X Window environment.  If you login to your system at the text console and use
'startx' or similar, you should log in as a normal user and run:

  $ xwmconfig

  Select the xinitrc.gnome (GNOME) option from the menu.

   Secondly, if you login to your system via a graphical login manager (such as
kdm, xdm or other) you will need to exit the graphical login manager in order
to allow gdm (the GNOME graphical login manager) to take over.  You will need
to modify your /etc/inittab and change the default run level to 4.  The gdm
graphical login manager will appear.  You can now login to your new GSB GNOME
desktop.  Make sure you select "GNOME" from the session selection menu (F10), if it
is not already the default.

-----

5. What do I do if I find errors or bugs?

   We try our best to keep the buildgsb script working, and all the packages in
the proper order. However, we haven't really thought out every contingency with
the use of the build scripts.  If you think you've come across a bug in the
build system, package order, or really anything, please do let us know.  You
can email:

          steve@gnomeslackbuild.org 

or the development mailing list (subscription needed) at 

         gsb-dev@googlegroups.com.

-----

APPENDIX A. Customising the Build Environment

   When building GSB, there are several environment variables which can be used
to tweak and customise the build process.  GSB supports two methods of setting
these environment variables, described below.

   The gsb.options file is read at the beginning of every build process, and the
options specified in this file will be saved across multiple builds.  Using
the gsb.options file is especially useful for repeat builds or for developers
who want to set specific options when testing.  Here are the common environment
variables which can be set to effect, tweak or customise the build process. Be
sure you know what you're doing when tweaking gcc options, and consult the gcc
manual.

ARCH

  Setting the ARCH allows you to over-ride the default base architecture type
for GSB.  You can use this environment option to build GSB for, say, x86_64 or
the powerpc architecture type.  The architecture type set when building GSB
determines the absolute minimum processor type required to run the produced
binaries.  In other words, if you set ARCH=i686 the resulting code will not
work on an i586 or earlier CPU.

  These ARCH types are currently recognised by the GSB SlackBuild scripts:
     i386, i486, i586, i686, x86_64 and powerpc.

  The default is "i486".
	
TUNE

  This option is very similar to the ARCH environment option except that the
resulting binaries are scheduler-tuned to the given processor type.  This means
that the binaries will be tuned to run with better performance on the CPU type
specified with TUNE, but will still work without problems on CPU types going
back to the value specified for ARCH.  TUNE can be set to any valid CPU type
within the architecture type specified with ARCH.  For example, if ARCH=i486,
TUNE could be set to i686.

  The default is "i686", except for an ARCH type of x86_64.

DISTRO

  Setting DISTRO to anything other than "slackware" allows GSB to be built on
different (Slackware based) distributions.  For example, this can be set to
"slackware" when building GSB on the 64 bit Slackware based distro Slackware64.

  The default is "slackware".

TMP

  During the package builds, temporary data will need to be stored on disk.
This option specifies the directory where that temporary data can be written.
Make sure the default (or any directory you specify) has enough free space for
the build process, plus the completed packages and logs.

  The default is "/tmp".

PKGDEST

  Once a package has been built, it will be stored in a sub directory of the
path specified with this option.  The default for this option is affected by
the value of $TMP.

  The default is "$TMP/gsb-tree".
  The default for x86_64 is "$TMP/gsb64-tree".

LOGSDIR

  As the GSB build process proceeds, a log of the output from each package
build is logged for later debugging.  This environment option specifies the
directory where these log files will be stored.  This option is not used by
individual package SlackBuilds but is used by the top-level SlackBuilds which
control the build processes.  

  The default is "$TMP/gsb-buildlogs".


WARNING WARNING WARNING: The following options are less common but allow highly
specific customisation of the build process.  You should not set these options
unless you know exactly what needs to be set for each.

GSB_CONFIGURE_FLAGS

  Any options specified in this environment variable are ADDED to the package
specific options passed to the ./configure command in the SlackBuilds.  If this
option is set globally (ie, set with export or in gsb.options) it sets the
additional options passed to ./configure for EVERY SlackBuild in GSB.
Therefore, make sure that any setting given in this environment option is valid
for EVERY ./configure used in GSB.

GSB_TUNE_CFLAGS

  This environment option allows you to set the specific tuning options gcc
should use when compiling/linking the binaries in packages.  There are many gcc
options which can be set to optimise/tune the binaries. See the gcc man page
for full details.  

  WARNING: Setting this option overrides the default tuning options specified
in the SlackBuild files. These options are NOT added to the default ones.  Make
sure you add any of the default options from the SlackBuilds back to this
environment option if you choose to use it.  Tuning is specific to each ARCH,
with the defaults being:

    i486 and i586: -O2 -march=$ARCH -mtune=$TUNE
             i686: -O2 -march=i686 -mtune=i686
           x86_64: -O2 -fPIC 
          powerpc: -O2 -march=powerpc

GSB_EXTRA_CFLAGS

  This setting is used to add custom/additional gcc options to be used during
the compiling/linking phase.  As with the above, there are many options which
can be used with gcc and the best place to look for these is the man page.
Setting this option over-rides the default extra options specified in the
SlackBuild files - these options are NOT added to the default ones.  Make sure
you add any of the default options from the SlackBuilds back to this
environment option if you choose to use it.

  There is no default for this option.

GSB_MAKE_FLAGS

  Using this environment option allows additional command line arguments and/or
options to be given to the "make" command when building the sources.  This
option may be useful for people with multi core/processor machines which can
perform parallel builds using an option such as "-j2" or "-j4".  See the man
page for make for full details of command line arguments and options.  Setting
this option over-rides the default make arguments specified in the SlackBuild
files - these options are NOT added to the default ones.  Make sure you add any
of the default arguments from the SlackBuilds back to this environment option
if you choose to use it.  

  There is no default for this option.

-----

APPENDIX B. SlackBuild Arguments

  There are several options which can be passed to buildgsb when beginning the
build process.  Options given to a top-level SlackBuild will be passed down to
the individual package SlackBuilds as a the build process continues.

The following options are recognised:

  --force		A package will not be built if a package of the same
			name is already installed, or any of the pre-requisite
			packages are not installed.  This option over-rides
			the checks and attempts a build (which will probably
			fail) anyway.

  --no-cleanup		By default, any source, temporary build and package
			directories will be deleted once the package is built.
			This option prevents those files from being removed.

  --no-patchesdir	When rebuilding packages which already exist in the
			main package directory, the default is to put the new
			packages in the patches directory.  Using this option
			completely disables the use of a patches directory.

  --no-skip		During the build process, packages that are up to date
			(ie, the package version and build numbers match the
			corresponding SlackBuild) will not be rebuilt.  This
			option forces packages to be rebuilt regardless of the
			version and build numbers.  This option doesn't affect
			the pre-build checks for installed packages (see the
			--force option).  This option implies --no-patchesdir.

  --no-prune		Normally, when a package is built and copied to the
			destination directory (whether it be the main package 
			directory or the patches directory), any previous
			package(s) of the same name in that directory are
			deleted - it is assumed the new package is to replace
			any which are already present.  This option prevents
			previous packages being deleted, possibly leaving more
			than one package of the same name (but with different
			version or build numbers) laying around.

  --publish      	Create the package's .txt and .asc meta files, and
                        create the FILELIST, CHECKSUMS, and MANIFEST, as well
                        as export the SlackBuild source into a publishable
                        tree. 
-- 
Have fun!

