About GNOME SlackBuild (GSB)
----------------------------

GNOME SlackBuild (GSB) is a build system to produce a GNOME desktop environment
for Slackware Linux.

The majority of the SlackBuild scripts are the official GNOME SlackBuilds that
shipped with previous versions of Slackware.  SlackBuilds are (slowly) being
updated and cleaned up.

For a lot more info about the project, visit:
  <http://gnomeslackbuild.org>


Quick start
-----------

You must be root in order to build GSB.

The GNOME etc source files are not distributed with GSB - part of the build
process will download the source files for you.  Obviously you need an (active)
internet connection to download the sources.

Here's what to do:
  $ ./bin/gsb_update.pl --dl --edit --build=gsb
  $ cd src/
  $ ./gsb.SlackBuild

Downloading the sources (gsb_update.pl) may take a while depending on the speed
of your internet connection.  Don't be surprised if it takes a few hours :)

Building GSB will take a very long time unless you have some top-notch hardware
or small cluster system.  I'd expect it to take at least 1-2 days for a full
build of GSB, assuming modest hardware or a desktop system in everyday use.

At the end of the build process (assuming there were no errors) you should have
a full copy of GSB installed on your system ready to go, and a copy of the
completed Slackware packages will be in /tmp/gsb-packages (see below for ways
to change where these packages will end up).

Starting the GSB GNOME environment will depend on how you start your current X
Window environment.  Both techniques are described below.

If you login to your system at the text console and use 'startx' or similar,
you should log in as your usual (not root!) user and run:
  $ xwmconfig
... and select the GNOME option from the menu.
You can also repeat the above as root to set the default for system as a whole,
but using root as your every day login user is a *really* *stupid* *idea*.

Secondly, if you login to your system via a graphical login manager (such as
kdm, xdm or other) you will need to exit the graphical login manager in order
to allow gdm (the GNOME graphical login manager) to take over.

To get gdm up and running you need to be at a text console [yes, an Xterm
will work but you'll have to re-login after X Windows exits - it's just easier
to do it this way, trust me]:  hold down Ctl and Alt and press F6 once.
After a couple of seconds you should see a text based "login" prompt.

At the text "login" prompt, login to your system as root and then run:
  $ init 3
... and wait for the system to close all of the X Window processes and return
you to the usual prompt.  It may take up to a minute to do this, and try
hitting Enter a couple of times to see when it's done.

Once back to the prompt, run:
  $ init 4
... and wait for the new gdm graphical login manager to appear.

You can now login to your new GSB GNOME desktop.  Make sure you select "GNOME"
from the session selection menu, if it is not already the default.

If you are returned to the prompt or your display keeps going on and off
repeatidly, the gdm application has not started sucessfully and there is a
problem.  You will need to return your system to the text based state in order
to debug the problem - use the same "init 3" command as detailed above.

If you do have a problem like this or cannot figure out what the issue is,
please visit us on the IRC channel for help - details are on the website.


Environment options
-------------------

When building GSB, there are several environment variables which can be used to
tweak and customise the build process.  GSB supports two methods of setting
these environment variables, described below.

The first option is to use the bash builtin "export" to manually set the option
and export it to all sub-processes.  This can be done with a command like:
      export VAR="VAL"
... which can be repeated for as many environment options as you want to set.

You must remember to set these options every time you begin a build process as
they will not be saved accross multiple builds.

The second option is to create a "gsb.options" file in the src/ directory.
The gsb.options file is read at the begining of every build process, and the
options specified in this file will be saved accross multiple builds.
Using the gsb.options file is especially useful for repeat builds or for
developers who want to set specific options when testing.

The gsb.options file should contain exactly the same "export" commands which
would be used manually on the command line (see above).  The advantage of
putting them into the gsb.options file is that the options will always be read,
no matter whether you remember to manually export them on the command line.

Here are the common environment variables which can be set to effect, tweak
or customise the build process:

ARCH
  Setting the ARCH allows you to over-ride the default base architecture type
  for GSB.  You can use this environment option to build GSB for, say, x86_64
  or the powerpc architecture type.  The architecture type set when building
  GSB determines the absolute minimum processor type required to run the
  produced binaries.  In other words, if you set ARCH=i686 the resulting code
  will NOT work on an i586 or earlier CPU.
  These ARCH types are currently recognised by the GSB SlackBuild scripts:
    i386, i486, i586, i686, x86_64 and powerpc.
  The default is "i586".
	
TUNE
  This option is very similar to the ARCH environment option except that the
  resulting binaries are scheduler-tuned to the given processor type.  This
  means that the binaries will be tuned to run with better performance on the
  CPU type specified with TUNE, but will still work without problems on CPU
  types going back to the value specified for ARCH.
  TUNE can be set to any valid CPU type within the architecture type specified
  with ARCH.  For example, if ARCH=i586, TUNE could be set to i686.
  For an ARCH type of x86_64, TUNE must be set to one of the 64 bit processor
  types, currently: k8, opteron, athlon64 and athlon-fx.
  The default is "i586", except for an ARCH type of x86_64 where it is "k8".

DISTRO
  Setting DISTRO to anything other than "slackware" allows GSB to be built on
  different (Slackware based) distributions.  For example, this can be set to
  "slamd64" when building GSB on the 64 bit Slackware based distro Slamd64.
  The default is "slackware", and should not be over-ridden unless you are
  specifically building for another distribution.

TMP
  During the package builds, temporary data will need to be stored on disk.
  This option specifies the directory where that temporary data can be written.
  Make sure the default (or any directory you specify) has enough free space
  for the build process, plus the completed packages and logs.
  The default is "/tmp".

PKGDEST
  Once a package has been built it will be stored in the directory specified
  with this option.  The default for this option is affected by the value of
  the TMP environment option detailed above (referred to as $TMP below).
  The default is "$TMP/gsb-packages".

LOGSDIR
  As the GSB build process proceeds, a log of the output from each package
  build is logged for later debugging.  This environment option specifies the
  directory where these log files will be stored.
  This option is not used by individual package SlackBuilds but is used by the
  top-level SlackBuilds which control the build processes.  The default for
  this option is affected by the value of the TMP environment option detailed
  above (referred to as $TMP below).
  The default is "$TMP/gsb-buildlogs".

The following options are less common but allow highly specific customisation
of the build process.  You should not set these options unless you know exactly
what needs to be set for each.
  
GSB_CONFIGURE_FLAGS
  Any options specified in this environment variable are ADDED to the package
  specific options passed to the ./configure command in the SlackBuilds.
  If this option is set globally (ie, set with export or in gsb.options) it
  sets the additional options passed to ./configure for EVERY SlackBuild in
  GSB.  Therefore, mkae sure that any setting given in this environment option
  is valid for EVERY ./configure used in GSB.
  When ARCH=x86_64, ./configure is automatically passed "--libdir=/usr/lib64".

GSB_TUNE_CFLAGS
  This environment option allows you to set the specific tuning options gcc
  should use when compiling/linking the binaries in packages.  There are many,
  many gcc options which can be set to optimise/tune the binaries - see the gcc
  man page for full details.  Setting this option over-rides the default tuning
  options specified in the SlackBuild files - these options are NOT added to
  the default ones.  Make sure you add any of the default options from the
  SlackBuilds back to this environment option if you choose to use it.
  Tuning is specific to each ARCH, with the defaults being:
    i386, i486: -O3 -march=$ARCH -mtune=$TUNE
    i586, i686: -O3 -march=$ARCH -mtune=$TUNE -pipe -fomit-frame-pointer \
                -ffast-math
    x86_64, with default TUNE: -O3 -march=k8 -mtune=k8 -pipe \
                               -fomit-frame-pointer -ffast-math -fPIC
    x86_64, with custom TUNE: -O3 -march=$TUNE -mtune=$TUNE -pipe \
                              -fomit-frame-pointer -ffast-math -fPIC
    powerpc: -O2 -march=$ARCH

GSB_EXTRA_CFLAGS
  This setting is used to add custom/additional gcc options to be used during
  the compiling/linking phase.  As with the above, there are many options which
  can be used with gcc and the best place to look for these is the man page.
  Setting this option over-rides the default extra options specified in the
  SlackBuild files - these options are NOT added to the default ones.  Make
  sure you add any of the default options from the SlackBuilds back to this
  environment option if you choose to use it.
  There is no default for this option.

GSB_MAKE_FLAGS
  Using this environment option allows additional command line arguments and/or
  options to be given to the "make" command when building the sources.  This
  option may be useful for people with multi core/processor machines which can
  perform parallel builds using an option such as "-j2" or "-j4".  See the man
  page for make for full details of command line arguments and options.
  Setting this option over-rides the default make arguments specified in the
  SlackBuild files - these options are NOT added to the default ones.  Make
  sure you add any of the default arguments from the SlackBuilds back to this
  environment option if you choose to use it.
  There is no default for this option.


SlackBuild arguments
--------------------

There are several options which can be passed to gsb.SlackBuild when begining
the build process.  Options given to a top-level SlackBuild will be passed
down to the individual package Slackbuilds as a the build process continues.

The following options are recognised:
  -help		Show the help page/usage for the SlackBuild.

  -force	A package will not be built if a package of the same name is
		already installed on the system, or any of the packages
		required to build it are missing.  This option over-rides these
		checks and attempts a build anyway, although it's very likely
		it will fail.

  -no-cleanup	By default any temporary source, build and package directories
		will be deleted once the package is built.  This option
		prevents all temporary files from being removed.

  -no-install	Build the packages but don't install them afterwards.  This
		option should only be used for testing individual SlackBuilds
		as it WILL cause serious problems - some package builds rely
		on another package being auto installed first, and may refuse
		to build or crash out at some point during the process.
		This is not used by individual package SlackBuilds, it is used
		by the top-level SlackBuilds to stop the auto install process
		which usually takes place during a GSB build.


Future development
------------------

I (Tadgy) am currently in the process of re-writing a lot of the gsb_update
system to be easier for non-developers to use and update with new versions and
packages.  Once my re-write reaches a half-decent stage of development I will
integrate it into the current GSB system for testing/debugging.

In addition to the above, i'm hoping to move the build process over to a "make"
type system, where targets or individual packages can be specified.  For
example, doing a "make gsb" would build the whole GSB system as it currently
does; but using a "make platform" would build all the packages which are part
of the GNOME platform specifiecation.  It will also be possible to build a
specific individual package from the top level Makefile, making it far easier
than the current system.

Obviously these developments take time, so stay tuned for updates!

If you are able to offer any development help and support for these updates and
changes, please feel free to give me a shout on IRC - information on the
channel and server are on the website.

