#!/bin/sh
# Copyright 2006, 2007, 2008, 2009  Eric Hameleers, Eindhoven, NL
# Copyright 2009  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:        Eric Hameleers <alien@slackware.com>
# For:       MPlayer
# Descr:     a movie player for LINUX
# URL:       http://www.mplayerhq.hu/
# -----------------------------------------------------------------------------
#
# Changelog:
#
# 08-08-09: Slightly modified for inclusion with GNOME SlackBuild, 
#           and recompiled against PulseAudio. (stevek)
#

# Package variables
VERSION=20101103
BUILD=1

# List any packages here that are required to build this package.
# The list is space seperated and case sensitive.
REQUIRED_PACKAGES="libpng libjpeg libogg xvidcore a52dec faad2 x264 libcddb libcdio libdvbpsi5 libdvdread libmms libsndfile libquicktime mpeg2dec libmpcdec libmad freetype sdl alsa-lib glib2 gtk+2 pulseaudio fontconfig libdvdnav subversion"

# Build variables
TAG=${TAG:-gsb}
ARCH=${ARCH:-i486}
TUNE=${TUNE:-i486}
DISTRO=${DISTRO:-slackware}
TMP=${TMP:-/tmp}
PKGDEST=${PKGDEST:-$TMP}

# Script variables.
PKGNAME=$(basename $0 .SlackBuild)
PKG=$TMP/package-$PKGNAME
CWD=$(pwd)
NOCLEANUP=0
FORCEBUILD=0

# Usage.
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  --force       The package will not be built if a package of the same
                        name is already installed, or any of the packages
                        required to build are missing.  This option over-rides
                        these checks and attempts a build anyway.
          --no-cleanup  By default any temporary source, build and package
                        directories will be deleted once the package is built.
                        This option prevents those files from being removed.
          --help        Show this help screen.
EOF
}

# Parse command line arguments.
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ] || [ "$1" = "--force" ]; then
    FORCEBUILD=1
    shift
  elif [ "$1" = "-no-cleanup" ] || [ "$1" = "--no-cleanup" ]; then
    NOCLEANUP=1
    shift
  elif [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

# Package requirements and installation checks.
[ "$FORCEBUILD" = "0" ] && {
  function check_installed() {
    ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    return $?
  }

  check_installed "$PKGNAME" && {
    echo "${0##*/}: Remove installed '$PKGNAME' package before build."
    exit 1
  }

  for REQ in $REQUIRED_PACKAGES; do
    check_installed "$REQ" || {
      echo "${0##*/}: Required package '$REQ' not installed."
      exit 1
    }
  done
}

DOCS="AUTHORS Changelog Copyright LICENSE README DOCS/tech"

DEFSKIN=${DEFSKIN:-"Blue"}  # Download more skins at the following url:
SKINVER=${SKINVER:-"1.7"}   # http://www.mplayerhq.hu/design7/dload.html

# Available languages: all bg cs de dk el en es fr hu it ja
# ko mk nb nl pl ro ru sk sv tr uk pt_BR zh_CN zh_TW
LANGUAGES="en nl fr de es"  # The default is to just add "en" documentation

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
  # --enable-runtime-cpudetection is supported only for x86, x86_64, and PPC
  EXTRACONFIGUREOPTIONS="--enable-runtime-cpudetection"
elif [ "$ARCH" = "i486" -o \
       "$ARCH" = "i586" -o \
       "$ARCH" = "i686" ]; then
  LIBDIRSUFFIX=""
  EXTRACONFIGUREOPTIONS="--enable-runtime-cpudetection"
else
  LIBDIRSUFFIX=""
  EXTRACONFIGUREOPTIONS=""
fi

CODECSDIR=/usr/lib${LIBDIRSUFFIX}/codecs   # Where the WIN32 codecs are expected for instance

# ---------------------------------------------------------------------------
# -- PATENT ALERT! --
# MPlayer source contains an internal copy of 'libdvdcss' for reading DVD's.
# This is considered illegal software in some countries.
# Also, MPLayer can be built with MP3 (lame) and AMR audio encoders
# (needed for FLV and .3GP videos) but these libraries are 'contaminated'
# with patents from Fraunhofer and GGP.
# Also, the AAC encoder has patent issues.
# The Slackware package is built with "USE_PATENTS=NO" i.e. without using
# the lame mp3, faac, AMR and dvdcss libraries.
# This also means that this creates a version of MPlayer that is unable
# to play encrypted DVD's (which is most DVD's on the market). If it is
# allowed in your country to use libdvdcss, this is not a big problem though.
# Install a libdvdcss package and it will be picked up automatically by
# MPlayer's internal libdvdread library, so that MPlayer will again be able
# to play encrypted DVD's.
#
# If you have licenses to use the code, and/or the patents do not apply in
# your region, and you take all legal responsibility, you may wish to build
# MPlayer with the option USE_PATENTS=YES which will include potentially
# patent-encumbered code.
# ---------------------------------------------------------------------------
USE_PATENTS=${USE_PATENTS:-"YES"}

# MPlayer will try to use one of the TrueType fonts present on the target
# system for it's On Screen Display (OSD) font.
# Slackware 13.0 ships with the Vera and DejaVu fonts, you may want to add
# more fonts to this list. The first font found will be used by creating a
# symbolic link "/usr/share/mplayer/subfont.ttf" to it.
# The use of bitmapped fonts is considered deprecated, but you can still use
# those if you want. Read http://www.mplayerhq.hu/DOCS/HTML/en/fonts-osd.html
# if you want to know more about OSD font configuration.
OSDFONTS="LiberationSans-Regular.ttf \
          Arialuni.ttf arial.ttf \
          DejaVuSans.ttf Vera.ttf"

# We will work with a stripped-down source tarball, not containing libdvdcss:
[ "$USE_PATENTS" != "YES" ] && EXTRA="_nolibdvdcss" || EXTRA=""

# Where do we look for sources?
SRCDIR=$(cd $(dirname $0); pwd)

SOURCE[0]="$CWD/${PKGNAME}${EXTRA}-${VERSION}.tar.xz"
SRCURL[0]=""

# The default skin to use (we need to add at least one)
SOURCE[1]="$CWD/${DEFSKIN}-${SKINVER}.tar.bz2"
SRCURL[1]="http://www.mplayerhq.hu/MPlayer/skins/${DEFSKIN}-${SKINVER}.tar.bz2"

# Use the src_checkout() function if no downloadable tarball exists.
# This function checks out sources from SVN/CVS and creates a tarball of them.
src_checkout() {
  # Param #1 : index in the SOURCE[] array.
  # Param #2 : full path to where SOURCE[$1] tarball should be created.
  # Determine the tarball extension:
  PEXT=$(echo "${2}" | sed -r -e 's/.*[^.].(tar.xz|tar.gz|tar.bz2|tgz).*/\1/')
  case "$PEXT" in
    "tar.xz") TARCOMP="J" ;;
    "tar.gz") TARCOMP="z" ;;
    "tgz") TARCOMP="z" ;;
    "tar.bz2") TARCOMP="j" ;;
    *) echo "Archive can only have extension 'tar.xz', '.tar.gz' '.tar.bz2' or '.tgz'" ; exit 1 ;;
  esac
  case ${1} in
  0) # mplayer
     if [ "$(echo ${VERSION}|cut -c1)" == 'r' ]; then # revision instead of date
       REV=$(echo ${VERSION} | cut -c2-)
     else
       REV="{${VERSION}}"
     fi
     mkdir -p MPlayer-${VERSION} \
       && cd MPlayer-${VERSION} \
       && svn checkout  svn://svn.mplayerhq.hu/mplayer/trunk . \
       && find . -type d -name '.svn' -depth | xargs rm -rf \
       && ([ "$USE_PATENTS" != "YES" ] && rm -rf libdvdcss || true) \
       && chown -R root:root . \
       && cd .. \
       && tar -${TARCOMP}cf ${2} MPlayer-${VERSION}
     rm -rf MPlayer-${VERSION}
     ;;
  *) # Do nothing
     ;;
  esac
}

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line $LINENO!" | tee $TMP/error-${PKGNAME}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

# Create working directories:
mkdir -p $TMP/$PKGNAME-$VERSION # location to build the source
rm -rf $TMP/$PKGNAME-$VERSION/* # remove the remnants of previous build
mkdir -p $PKG             # place for the package to be built
rm -rf $PKG/*             # erase old package's contents
mkdir -p $TMP          # place for the package to be saved

# Source file availability:
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if ! [ -f ${SOURCE[$i]} ]; then
    echo "Source '$(basename ${SOURCE[$i]})' not available yet..."
    # Check if the $CWD is writable at all - if not, download to $TMP
    [ -w "$CWD" ] || SOURCE[$i]="$TMP/$(basename ${SOURCE[$i]})"
    if ! [ "x${SRCURL[$i]}" == "x" ]; then
      echo "Will download file to $(dirname $SOURCE[$i])"
      wget -nv -T 20 -O "${SOURCE[$i]}" "${SRCURL[$i]}" || true
      if [ $? -ne 0 -o ! -s "${SOURCE[$i]}" ]; then
        echo "Downloading '$(basename ${SOURCE[$i]})' failed.. aborting the build."
        mv -f "${SOURCE[$i]}" "${SOURCE[$i]}".FAIL
        exit 1
      fi
    else
      # Try if we have a SVN/CVS download routine for ${SOURCE[$i]}
      echo "Will checkout sources to $(dirname $SOURCE[$i])"
      src_checkout $i "${SOURCE[$i]}" 2>&1 > $TMP/checkout-$(basename ${SOURCE[$i]}).log
    fi
    if [ ! -f "${SOURCE[$i]}" -o ! -s "${SOURCE[$i]}" ]; then
      echo "File '$(basename ${SOURCE[$i]})' not available.. aborting the build."
      exit 1
    fi
  fi
done

if [ "$P1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PKGNAME-$VERSION"
echo "++"

# Warn about libdvdread requirement:
if [ "$USE_PATENTS" != "YES" ]; then
  cat <<"EOT"
**
** Removing internal DeCSS library.
** If you want to play encrypted DVD's you need to install libdvdcss separately.
** You take full legal responsibility for any use of DeCSS.  We neither supply
** DeCSS code nor endorse any illegal use of it.
**
** If you are unaffected by patent concerns because you hold the required
** licenses and permission to use the patented code, or reside in a
** location where this is not a concern, and wish to include the patented
** and restricted code (you take all legal responsibility for doing so),
** then edit this SlackBuild script and change the line:
** USE_PATENTS=${USE_PATENTS:-"NO"}
** to:
** USE_PATENTS="YES"
**
EOT
  sleep 5
fi

cd $TMP
echo "Extracting the source archive(s) for $PKGNAME..."
tar -xvf ${SOURCE[0]}
cd ${PKGNAME}-${VERSION}
[ "$USE_PATENTS" != "YES" ] && rm -rf libdvdcss
chown -R root:root *
chmod -R u+w,go+r-w,a-s *

# Determine what X we're running (the modular X returns the prefix
# in the next command, while older versions stay silent):
XPREF=$(pkg-config --variable=prefix x11) || true
[ "$XPREF" == "" ] && XPREF='/usr/X11R6'

# Remove support for patent encumbered and possibly illegal code:
if [ "$USE_PATENTS" != "YES" ]; then
  DO_PATENTED="--disable-libdvdcss-internal \
               --disable-mp3lame --disable-mp3lame-lavc --disable-win32dll \
               --disable-faac --disable-faac-lavc --disable-qtx"
else
  DO_PATENTED=""
fi

echo Building ...
# MPlayer wants to automatically determine compiler flags,
# so we don't provide CFLAGS:
./configure --prefix=/usr \
            --mandir=/usr/man \
            --confdir=/etc/mplayer \
            --enable-gui \
	    --disable-win32dll \
	    --disable-qtx \
            --enable-menu \
            --enable-largefiles \
            --disable-arts \
            --codecsdir=${CODECSDIR} \
            --realcodecsdir=${CODECSDIR} \
            --language="${LANGUAGES}" \
            ${EXTRACONFIGUREOPTIONS} \
            ${DO_PATENTED} \
            2>&1 | tee $TMP/configure-${PKGNAME}.log
# So that MPlayer does not report "UNKNOWN" as it's version:
echo $VERSION > VERSION
make 2>&1 &&
make DESTDIR=$PKG install 2>&1 || exit 1

# Build the html documentation (not all languages are available):
( cd DOCS/xml
  for i in $(echo $LANGUAGES | tr , ' ') ; do 
    [ -d $i ] && make html-single-$i ;
  done
)

# Prepare the configfile:
mkdir -p $PKG/etc/mplayer
cp etc/example.conf $PKG/etc/mplayer/mplayer.conf.new

# Install our default skin:
mkdir -p $PKG/usr/share/mplayer/skins
cd $PKG/usr/share/mplayer/skins
tar -xvf ${SOURCE[1]}
chown -R root:root *
chmod -R u+w,go+r-w,a-s *
ln -s ${DEFSKIN} default
cd -

# Add this to the doinst.sh:
! [ -d $PKG/install ] && mkdir -p $PKG/install
cat <<EOINS >> $PKG/install/doinst.sh
# Handle the incoming configuration files:
config() {
  for infile in \$1; do
    NEW="\$infile"
    OLD="\`dirname \$NEW\`/\`basename \$NEW .new\`"
    # If there's no config file by that name, mv it over:
    if [ ! -r \$OLD ]; then
      mv \$NEW \$OLD
    elif [ "\`cat \$OLD | md5sum\`" = "\`cat \$NEW | md5sum\`" ]; then
      # toss the redundant copy
      rm \$NEW
    fi
    # Otherwise, we leave the .new copy for the admin to consider...
  done
}

# Installing a bitmap font is considered deprecated; use a TTF font instead.
# We try to link to an installed TTF font at install time.
# Configure a default TrueType font to use for the OSD :
if [ ! -f usr/share/mplayer/subfont.ttf ]; then
  for font in ${OSDFONTS}; do
    if [ -f .${XPREF}/lib${LIBDIRSUFFIX}/X11/fonts/TTF/\${font} ]; then
      ( cd usr/share/mplayer/
        ln -sf ${XPREF}/lib${LIBDIRSUFFIX}/X11/fonts/TTF/\${font} subfont.ttf
      )
      break
    fi
  done
fi

# Prepare the new configuration file
config etc/mplayer/mplayer.conf.new

if [ -x /usr/bin/update-desktop-database ]; then
  chroot . /usr/bin/update-desktop-database -q usr/share/applications
fi

if [ -e usr/share/icons/hicolor/icon-theme.cache ]; then
  if [ -x usr/bin/gtk-update-icon-cache ]; then
    chroot . /usr/bin/gtk-update-icon-cache usr/share/icons/hicolor >/dev/null 2>&1
  fi
fi

EOINS

# Add documentation:
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -a $DOCS $PKG/usr/doc/$PKGNAME-$VERSION || true
cp -a $CWD/$(basename $0) $PKG/usr/doc/$PKGNAME-$VERSION/$PKGNAME.SlackBuild
# Broken:
#mv $PKG/usr/doc/$PKGNAME-$VERSION/HTML-single $PKG/usr/doc/$PKGNAME-$VERSION/html
# Save a sample of all configuration files:
for i in etc/*.conf ; do
  cp $i $PKG/usr/doc/$PKGNAME-$VERSION/$(basename $i)-sample
done
find $PKG/usr/doc -type f -exec chmod 644 {} \;

# Compress the man page(s):
if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find $PKG/usr/man -type l -name "*.?") ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Strip binaries:
( find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null )

# Add a package description:
mkdir -p $PKG/install
# Package meta files
for FILE in doinst.sh slack-desc slack-required slack-conflicts slack-suggests
do
  [ -e $CWD/$FILE ] && {
    cat $CWD/$FILE >>$PKG/install/$FILE
  }
done

# Build the package:
cd $PKG
makepkg -p -l y -c n $PKGDEST/$PKGNAME-${VERSION//-/_}-$ARCH-${BUILD}${TAG}.txz

# Warn about libdvdcss requirement (again):
if [ "$USE_PATENTS" != "YES" ]; then
  cat <<"EOT"
**
** Internal DECSS library was not built.
** If you want to play encrypted DVD's you need to install libdvdcss separately.
** You take full legal responsibility for any use of DeCSS.  We neither supply
** DeCSS code nor endorse any illegal use of it.
**
** If you are unaffected by patent concerns because you hold the required
** licenses and permission to use the patented code, or reside in a
** location where this is not a concern, and wish to include the patented
** and restricted code (you take all legal responsibility for doing so),
** then edit this SlackBuild script and change the line:
** USE_PATENTS=${USE_PATENTS:-"NO"}
** to:
** USE_PATENTS="YES"
**
EOT

fi

# Cleanup
[ "$NOCLEANUP" = "0" ] && {
  rm -rf $PKG $TMP/$PKGNAME-$VERSION
}
