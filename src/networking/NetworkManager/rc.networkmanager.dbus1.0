#!/bin/sh
#
# NetworkManager:   NetworkManager daemon
#
# description:  This is a daemon for automatically switching network 
#               connections to the best available connection.
#
# processnames: NetworkManager, wpa_supplicant
# pidfiles: /var/run/NetworkManager.pid, /var/run/wpa_supplicant.pid
#
# This file has been modified for Slackware 12 compatibility, and
# to include dbus service for wpa_supplicant for NetworkManager 0.7svn (stevek)

prefix=/usr
exec_prefix=/usr
sbindir=${exec_prefix}/sbin

NETWORKMANAGER_BIN=${sbindir}/NetworkManager
WPA_SUPPLICANT_BIN=${sbindir}/wpa_supplicant

# Make sure NetworkManager is executable
[ -x $NETWORKMANAGER_BIN ] || exit 0

# We need /sbin/ip
[ -x /sbin/ip ] || exit 0

# We need wpa_supplicant for dbus support
[ -x $WPA_SUPPLICANT_BIN ] || exit 0

NM_PIDFILE=/var/run/NetworkManager.pid
WPA_PIDFILE=/var/run/wpa_supplicant.pid

nm_start()
{
if [ "`pgrep dbus-daemon`" = "" ]; then
    echo "D-BUS must be running to start NetworkManager"
    return
fi
  
if [ "`pgrep hald`" = "" ]; then
 echo "HAL must be running to start NetworkManager"
 return
fi

echo "Starting NetworkManager daemon:  $NETWORKMANAGER_BIN --pid-file $NM_PIDFILE"
$NETWORKMANAGER_BIN --pid-file $NM_PIDFILE
echo "Starting wpa_supplicant daemon for dbus:  $WPA_SUPPLICANT_BIN -Bu -P $WPA_PIDFILE"
$WPA_SUPPLICANT_BIN -Bu -P $WPA_PIDFILE 

}

nm_status()
{
  local pidlist=`cat $NM_PIDFILE 2>/dev/null`
  if [ -z "$pidlist" ]; then
    return 1
  fi
  local command=`ps -p $pidlist -o comm=`
  if [ "$command" != 'NetworkManager' ]; then
    return 1
  fi
}

nm_stop()
{
  echo -en "Stopping NetworkManager: "
  local pidlist=`cat $NM_PIDFILE 2>/dev/null`
  if [ ! -z "$pidlist" ]; then
    kill $pidlist &>/dev/null
    rm -f $NM_PIDFILE &>/dev/null
  fi
  echo "stopped";

  echo -en "Stopping wpa_supplicant dbus services: "
  local pidlist=`cat $WPA_PIDFILE 2>/dev/null`
  if [ ! -z "$pidlist" ]; then
    kill $pidlist &>/dev/null
    rm -f $WPA_PIDFILE &>/dev/null
  fi
  echo "stopped";
}

nm_restart()
{
  nm_stop
  nm_start
}

case "$1" in
'start')
  if ( ! nm_status ); then
    nm_start
  else
    echo "NetworkManager is already running (will not start it twice)."
  fi
		;;
'stop')
  nm_stop
		;;
'restart')
  nm_restart
		;;
'status')
  if ( nm_status ); then
    echo "NetworkManager is currently running"
  else
    echo "NetworkManager is not running."
  fi
		;;
*)
  echo "usage $0 start|stop|status|restart"
esac
