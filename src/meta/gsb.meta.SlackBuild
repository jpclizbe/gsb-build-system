#!/bin/bash
# Version: 1.2 GSB Section Build Script
# Copyright (c) 2007 Darren 'Tadgy' Austin <darren (at) gnomeslackbuild.org>
# Copyright (c) 2007 Steve Kennedy <sk238 (at) exeter.ac.uk>
#
# Package name routine partially borrowed from the Slackware upgradepkg tool.
# Copyright 1999  Patrick Volkerding, Moorhead, Minnesota, USA.
# Copyright 2001, 2002, 2003  Slackware Linux, Inc., Concord, California, USA
#
# Licenced under the terms of the GNU General Public Licence version 3.
#

# If the user created an options file, read it if it's not been read already.
[ "$OPTIONSREAD" != "1" -a -r ../gsb.options ] && {
  . ../gsb.options
  export OPTIONSREAD=1
}

#
# Environment Variables
#
export TMP=${TMP:-/tmp}
export LOGSDIR=${GSB_LOGSDIR:-$TMP/gsb-buildlogs}
export PKGDEST=${PKGDEST:-$TMP/gsb-tree/packages}

# There are no binaries in them, so they will only need
# to be noarch.  It's up to the user to ensure they
# have their slapt-get pointed to the proper binary
# repository.  :^)
ARCH=noarch
DISTRO=${DISTRO:-slackware}

## Package variables.  Version is GNOME release version.
BUILD=1
VERSION=2.20.2

## List any packages here that are required to build this package.
## The list is space seperated and case sensitive.
REQUIRED_PACKAGES="pkgtools"


# Script Variables
CWD=$(pwd)
NOCLEANUP=1
FORCEBUILD=0

# Section Name
SECTION=meta

# 
# Functions 
#

# Prints usage and help 
function usage() {
  cat << EOF
Usage: ${0#*/} [options]

The default behaviour of the build script is to skip any previously 
installed package, and continue building the next package in the 
build order.  This is to avoid accidently updating and removing
of any customized, prebuilt, or Slackware default packages. 

You will need to pass the -update switch to build GSB packages that 
replace any default Slackware package.

Options:  --force   
 
            The package will not be built if a package of the same
            name is already installed, or any of the packages
            required to build are missing.  This option over-rides
            these checks and attempts a build anyway. 

            It cannot be used with the --update switch.

          --update 

            This switch will make the build script test each package
            version as defined in the SlackBuild script against the
            currently installed package.  If there is a difference,
            the script will remove, rebuild, and reinstall the package.

            It cannot be used with the --force switch.

          --no-cleanup   
            
            By default any temporary source, build and package
            directories will be deleted once the package is built.
            This option prevents those files from being removed.

          --no-install 
            
            Build the packages but don't install them.  This should
            only be used for testing individual SlackBuilds. It may
            cause the section build to fail when required packages
            are not installed and the dependency checks fail.

          --help     
 
            Show this help screen.

Options are passed down to the next level SlackBuild where appropriate.

EOF
}

#
# Command Line Parsing
#
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ] || [ "$1" = "--force" ]; then
    if [ "$UPDATE" = "1" ]; then
       echo "${0#*/}: The switches --force and --update are mutually exclusive."
       exit 1;
    fi;
    FORCE=1
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS --force"
    shift
  elif [ "$1" = "-no-cleanup" ] || [ "$1" = "--no-cleanup" ]; then
    NOCLEANUP=1
    shift
  elif [ "$1" = "-no-install" ] || [ "$1" = "--no-install" ]; then
    NOINSTALL=1
    shift
  elif [ "$1" = "-update" ] || [ "$1" = "--update" ]; then
    if [ "$FORCE" = "1" ]; then
       echo "${0#*/}: The switches --force and --update are mutually exclusive."
       exit 1;
    fi;
    UPDATE=1
    shift
  elif [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
  else
    echo "${0#*/}: Unknown option: $1"
    exit 1
  fi
done


#
# Create Temporary Space
#
mkdir -p $TMP
mkdir -p $LOGSDIR

#
# GSB Metapackages
#
# These packages are essentially empty, except for a list of 
# package requirements for each section.  They allow users
# to use slapt-get to install by logical section, like
# gsb-desktop, or gsb-extras, etc. 

#
# BUILD ORDER
#

# Package build list.  Order doesn't matter.

BUILD_ORDER=" 
     gsb-accessibility
     gsb-administration
     gsb-desktop
     gsb-office
     gsb-development
     gsb-multimedia
     gsb-mono
     gsb-themes
     gsb-compiz
     gsb-complete
   "
#
# MAIN BUILD 
#

# Build packages (and log output). This is the main loop through
# all the packages listed above.
( for PACKAGE in $BUILD_ORDER

do

# This check is for more useful as a reminder than a strict warning here
# but it's best left in.  Metapackages are only really useful for 
# slapt-get, as installpkg and pkgtool don't really check dependencies.

## Package requirements and installation checks.
[ "$FORCEBUILD" = "0" ] && {
  function check_installed() {
    ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    return $?
  }

  check_installed "$PACKAGE" && {
    echo "${0##*/}: Remove installed '$PACKAGE' package before build."
    exit 1
  }
  
  for REQ in $REQUIRED_PACKAGES; do
    check_installed "$REQ" || {
      echo "${0##*/}: Required package '$REQ' not installed."
      exit 1
    }
  done
}

if [ -f $CWD/slack-desc.$PACKAGE -a -f $CWD/slack-required.$PACKAGE ]; then

  mkdir -p $TMP/$PACKAGE-$VERSION/install 

  echo "* Compiling metapackage: ${PACKAGE}"

  # Install metapackage description
  if [ -f $CWD/slack-desc.$PACKAGE ]; then
    cat $CWD/slack-desc.$PACKAGE > $TMP/$PACKAGE-$VERSION/install/slack-desc || exit 1
  fi;

  # Install metapackage package list
  if [ -f $CWD/slack-required.$PACKAGE ]; then
    cat $CWD/slack-required.$PACKAGE > $TMP/$PACKAGE-$VERSION/install/slack-required || exit 1
  fi;

  # Install metapackage suggested (if exists)
  if [ -f $CWD/slack-suggests.$PACKAGE ]; then
    cat $CWD/slack-suggests.$PACKAGE > $TMP/$PACKAGE-$VERSION/install/slack-suggests || exit 1
  fi;

  # Create the package
  cd $TMP/$PACKAGE-$VERSION
  makepkg -p -l y -c n $PKGDEST/$PACKAGE-${VERSION//-/_}-$ARCH-$BUILD.tgz 2> /dev/null 1> /dev/null || exit 1

  # Seperate package into appropriate section
  mkdir -p $PKGDEST/$SECTION
  if [ -f $PKGDEST/${PACKAGE}-${VERSION//-/_}*.tgz ]; then
    mv -f $PKGDEST/${PACKAGE}-${VERSION//-/_}*.tgz $PKGDEST/$SECTION > /dev/null 2>&1 || exit 1
  fi;

  ## Cleanup
  [ "$NOCLEANUP" = "0" ] && {
    rm -rf $PKG $TMP/$PACKAGE-$VERSION
    }

else
  echo "${0#*/}: Cannot find $PACKAGE metadata."
  exit 1;

fi;

done;
# Main loop

#
# Log Output
#
) 2>&1 | tee $LOGSDIR/$PACKAGE-$(date +%Y%m%d-%H%M%S).log

# Return the exit status from the sub-shell, not the tee command.
exit ${PIPESTATUS[0]}
