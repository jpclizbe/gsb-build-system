#!/bin/sh
##
## Version: 1.1 GSB SlackBuild
##
## Copyright (c) 2007 Darren Austin <darren (at) afterdark.org.uk>
## Copyright (c) 2007 Steve Kennedy <sk238 (at) exeter.ac.uk>
##
## Licenced under the terms of the GNU General Public Licence version 3.
## 

## 
## Package Variables
##
BUILD=1
VERSION=2.20.0
REQUIRED_PACKAGES="automake"

## 
## Build Variables
##
ARCH=${ARCH:-i586}
TUNE=${TUNE:-i686}
DISTRO=${DISTRO:-slackware}
TMP=${TMP:-/tmp}
PKG_DEST={$PKG_DEST:-$TMP/package}

##
## Package Variables
##
PKGNAME=$(basename $0 .SlackBuild)
CWD=$(pwd)
PKG=$TMP/package-$PKGNAME

##
## Usage
##

usage() {
cat << EOF
Usage: $(basename $0) [options]

Use this script to run a build of $PKGNAME.

options:      -force      (SlackBuild will not run a build if $PKGNAME is already installed.
                           Use this switch to force a build.)
              -no-cleanup (SlackBuild will remove the temporary build and package 
                           directories when finished.  Use this switch to keep
                           all files after the package is created.)
              -help       (This help screen.)

EOF
}

##
## Default script settings
##
CLEANUP=yes
FORCEBUILD=no

while [ 0 ]; do
  if [ "$1" = "-no-cleanup" ]; then
    CLEANUP=no
    shift 1
  elif [ "$1" = "-help" ]; then
    usage;
    exit;
  elif [ "$1" = "-force" ]; then
    FORCEBUILD=yes
  else
    break
  fi
done

##
## Package Requirements and Installation Check
##

## 
## SlackBuild will not rebuild a package already installed
## Pass "-force" to the SlackBuild script to force it to 
## rebuild an already installed package.

if [ "$FORCEBUILD" = "no" ]; then

function check_installed() {
	ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    	return $?
}

check_installed "$PKGNAME" && {
	echo "${0##*/}: Remove installed '$PKGNAME' package before build."; 
	exit 1
}

for REQ in $REQUIRED_PACKAGES; 
	do
   		check_installed "$REQ" || {
		echo "${0##*/}: Required package '$REQ' not installed."; 
		exit 1
		}
	done;
fi;

##
## Temporary Space
##
if [ ! -d $TMP ]; then
  mkdir -p $TMP 
fi
rm -rf $PKG
mkdir -p $PKG

##
## Compiler and Make Options
##
TUNE_FLAGS="-march=$ARCH -mtune=$TUNE"
ARCH_CONFIGURE=""
MAKE_FLAGS=""

if [ "$ARCH" = "i386" ]; then
  GSB_CFLAGS="$TUNE_FLAGS -O2"
elif [ "$ARCH" = "i486" ]; then
  GSB_CFLAGS="$TUNE_FLAGS -O2"
elif [ "$ARCH" = "i586" ]; then
  GSB_CFLAGS="$TUNE_FLAGS -O3 -pipe -fomit-frame-pointer -ffast-math"
elif [ "$ARCH" = "i686" ]; then
  GSB_CFLAGS="$TUNE_FLAGS -O3 -pipe -fomit-frame-pointer -ffast-math"
elif [ "$ARCH" = "powerpc" ]; then
  GSB_CFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  GSB_CFLAGS="$TUNE_FLAGS -O3 -pipe -fomit-frame-pointer -ffast-math -fPIC"
  ARCH_CONFIGURE="--libdir=/usr/lib64"
  MAKE_FLAGS="-j4"
else
  echo "Unknown arch type $ARCH."
  exit 1
fi

## Decompress archive
cd $TMP 
tar xjf $CWD/${PKGNAME}-${VERSION}.tar.bz2
cd $PKGNAME-$VERSION

# Apply $ARCH specific patches
if [ "$ARCH" = "i386" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i486" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i686" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "s390" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "powerpc" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "x86_64" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
fi

##
## Fix permissions for building
##
chown -R root.root .
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;


##
## Run Configure and Build
##
## Add any local configuration options here.

CFLAGS="$GSB_CFLAGS" \
CXXFLAGS="$GSB_CFLAGS" \
./configure --prefix=/usr \
            $ARCH_CONFIGURE \
	    --sysconfdir=/etc \
            --localstatedir=/var/lib \
            --disable-static --enable-shared \
            --target=$ARCH-$DISTRO-linux \
           || exit 1

make $MAKE_FLAGS || exit 1
make install DESTDIR=$PKG

## Install Extra Documentation
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -a \
  AUTHORS COPYING* ChangeLog NEWS README \
  $PKG/usr/doc/$PKGNAME-$VERSION
find $PKG/usr/doc/$PKGNAME-$VERSION/ -type f -exec chmod 644 {} \;

##
##  Permissions
##
chown -R $(stat --format "%u:%g" /usr/sbin) $PKG/usr/bin
chown -R root.root $PKG/usr/doc/$PKGNAME-$VERSION/*

##
## Strip Debugging Info
##
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

##
## Compress and Link Manpages
##
if [ -d $PKG/usr/man ]; then
  ( cd $PKG/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

##
## Slackware Package Information
##
mkdir -p $PKG/install
if [ -e $CWD/slack-required ]; then
        cat $CWD/slack-required > $PKG/install/slack-required
fi;

if [ -e $CWD/slack-desc ]; then
        cat $CWD/slack-desc > $PKG/install/slack-desc
fi;

if [ -e $CWD/doinst.sh ]; then
        cat $CWD/doinst.sh > $PKG/install/doinst.sh
fi;


##
## Make Slackware Package
##
cd $PKG
makepkg -l y -c n $PKG_DEST/$PKGNAME-$VERSION-$ARCH-$BUILD.tgz

##
## Cleanup Temporary Files
##
if [ "$CLEANUP" = "yes" ]; then
  rm -rf $TMP/$PKGNAME-$VERSION
  rm -rf $PKG
fi
