#!/bin/bash

# Usage.
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  -force	The package will not be built if a package of the same
			name is already installed, or any of the packages
			required to build are missing.  This option over-rides
			these checks and attempts a build anyway.
	  -no-cleanup	By default any temporary source, build and package
			directories will be deleted once the package is built.
			This option prevents those files from being removed.
	  -no-install	Build the packages but don't install them.  This should
			only be used for testing individual SlackBuilds as it
			WILL cause serious problems - some package builds may
			rely on another package being auto installed first.
	  -help		Show this help screen.

	Options are passed down to the next level SlackBuild where appropriate.
EOF
}

# If the user created an options file, read it if it's not been read already.
[ "$OPTIONSREAD" != "1" -a -r ../gsb.options ] && {
  . ../gsb.options
  export OPTIONSREAD=1
}

# Environment.
export TMP=${TMP:-/tmp}
export LOGSDIR=${GSB_LOGSDIR:-$TMP/gsb-buildlogs}

# Parse command line arguments.
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ]; then
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -force"
    shift
  elif [ "$1" = "-no-cleanup" ]; then
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -no-cleanup"
    shift
  elif [ "$1" = "-no-install" ]; then
    NOINSTALL=1
    shift
  elif [ "$1" = "-help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

# Temporary space and log file storage.
mkdir -p $TMP
mkdir -p $LOGSDIR

# Packages must be listed here in the order they should be built.
##
## GNOME Desktop Files.  
##
## These are packages that are required and make the bare
## GNOME Desktop.
##
## http://www.gnome.org/start/2.20/notes/en/index.html#rninstallation
## 

####
#### BUILD ORDER
####

BUILD_ORDER="
gnome-themes
tango-icon-theme
gnome-doc-utils
at-spi
gail
gnome-desktop
gnome-menus
libwnck
libsoup
evolution-data-server
gnome-python
gstreamer
gst-plugins-base
gst-plugins-good
gnome-panel
gnome-terminal
libgtop
gnome-applets
libxklavier
libgnomekbd
libgnomecups
libgnomeprint
libgnomeprintui
libgtkhtml
metacity
libgsf
libcroco
libgnomecups
libgnomeprint
libgnomeprintui
eel
nautilus
gnome-control-center
gnome-session
yelp
enchant
##
## FIX ME----- probably after this should be in applications --
##
bug-buddy
nautilus-cd-burner
gst-plugins-ffmpeg
gst-plugins-bad
gst-plugins-ugly
gnome-media
gnome-python-desktop
gconf-editor
gnome-utils
gnome-system-monitor
gnome-netstatus
zenity
libgail-gnome
gnome-speech
gnome-mag
gnopernicus
gok
gob2
gnome-games
gnome-user-docs
file-roller
gnome-system-tools
gnome-nettool
vino
gnome-volume-manager
gnome-backgrounds
gtkhtml
evolution
evolution-webcal
evolution-exchange
ekiga
evince
dasher
gnome-keyring-manager
deskbar-applet
fast-user-switch-applet
gnome-screensaver
pessulus
sabayon
gtksourceview
gedit-plugins
gnome-spell
gnome-pilot
gnome-pilot-conduits
nautilus-sendto
gnome-mount
liboobs
gal2
gnome-user-share
gdm
alacarte
"

# Build packages (and log output).
( for PACKAGE in $BUILD_ORDER
  do
    echo
    echo "*************************************************"
    echo "****** Building package: $PACKAGE"
    echo "*************************************************"
    ( cd $PACKAGE ; ./$PACKAGE.SlackBuild "$SLACKBUILD_ARGS" ) || exit 1
    [ "$NOINSTALL" != "1" ] && {
      upgradepkg --install-new \
        ${PKGDEST:-$TMP/gsb-packages}/$PACKAGE-*.tgz || exit 1
    }
  done
) 2>&1 | tee $LOGSDIR/$(basename $0 .SlackBuild)-$(date +%Y%m%d-%H%M%S).log
