===================================================================
RCS file: /cvs/gnome/gok/gok/main.c,v
retrieving revision 1.189
retrieving revision 1.190
diff -u -r1.189 -r1.190
--- main.c	2006/05/11 14:39:56	1.189
+++ main.c	2006/05/12 17:30:25	1.190
@@ -123,7 +123,7 @@
 /* pointer to the gok command predictor */
 static Gok_Predictor m_pCommandPredictor = NULL;
 
-/* command line aguments storage structure */
+/* poptOption storage structure */
 typedef struct _GokArgs {
 	char* accessmethodname;
 	char* inputdevicename;
@@ -170,83 +170,83 @@
 static gint _screen_height, _screen_width;
 
 
-static const GOptionEntry options[] = {
+static struct poptOption options[] = {
 	{
 		"access-method", 
 		'a',
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.accessmethodname, 
+		0,
 		N_("Use the specified access method. NAME is a string and can be found in the various access method files (.xam) assigned to the \"name\" property of  tag. Note this is not necessarily the same as the name of the .xam file. (See --list-accessmethods)"), 
 		N_("NAME")
 	},
 	{
 		"editor", 
-		'e',
-		0,	
-		G_OPTION_ARG_NONE, 
+		'e', 
+		POPT_ARG_NONE, 
 		&gok_args.display_keyboard_editor, 
+		0,
 		N_("Start the GOK keyboard editor"), 
 		NULL},
 	{
 		"extras", 
 		'\0', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.use_extras, 
+		0,
 		N_("Use special, but possibly unstable, gok stuff"),
 		NULL},
 	{
 		"geometry", 
 		'\0', 
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.geometry, 
+		0,
 		N_("Whenever --geometry is not used gok remembers its position between invocations and starts in the position that it had when it was last shutdown.  When --geometry is used gok positions itself within the rectangular area of screen described by the given X11 geometry specification.  When --geometry is used gok does not remember its position when it shuts down.  This behaviour can be changed with the --remembergeometry flag which forces gok to remember its position when shutdown even when it was started with --geometry."),
 		N_("GEOMETRY")
 	},
 	{
 		"input-device", 
 		'i', 
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.inputdevicename, 
+		0,
 		N_("Use the specified input device"), 
 		N_("DEVICENAME")
 	},
 	{
 		"keyboard", 
 		'k', 
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.mainkeyboardname, 
+		0,
 		N_("Start GOK with the specified keyboard."), 
 		N_("KEYBOARDNAME")
 	},
 	{
 		"list-accessmethods", 
 		'\0', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.list_accessmethods, 
+		0,
 		N_("List the access methods that can be used as options to other arguments."),
 		NULL
 	},
 	{
 		"list-actions", 
 		'\0', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.list_actions, 
+		0,
 		N_("List the actions that can be used as options to other arguments."),
 		NULL
 	},
 	{
 		"login", 
 		'l', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.is_login, 
+		0,
 		N_("GOK will be used to login"),
 		NULL
 	},
@@ -254,9 +254,9 @@
 	{
 		"debugnameless", 
 		'\0', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.debug_nameless, 
+		0,
 		N_("GOK will display keys for nameless GUI. Useful for debugging."),
 		NULL
 	},
@@ -264,9 +264,9 @@
 	{
 		"remembergeometry", 
 		'\0', 
-		0,
-		G_OPTION_ARG_NONE,
+		POPT_ARG_NONE,
 		&gok_args.remember_geometry, 
+		0,
 		N_("Can be used with --geometry.  Forces GOK to remember its position when shutdown even when it was started with --geometry.  Please see the discussion under the --geometry flag for more information."),
 		NULL
 	},
@@ -275,9 +275,9 @@
 		/* note: not enough info for 5-switch directed scanning */
 		"scan-action", 
 		'\0', 
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.scanactionname, 
+		0,
 		N_("Start GOK and hook this action to scan operations. (See --list-actions)"), 
 		NULL
 	},
@@ -285,33 +285,33 @@
 		/* primarily for use at login since there is no gconf */
 		"select-action", 
 		'\0', 
-		0,
-		G_OPTION_ARG_STRING, 
+		POPT_ARG_STRING, 
 		&gok_args.selectactionname, 
+		0,
 		N_("Start GOK and hook this action to select operations. (See --list-actions)"), 
 		NULL
 	},
 	{
 		"settings", 
 		's', 
-		0,
-		G_OPTION_ARG_NONE, 
+		POPT_ARG_NONE, 
 		&gok_args.display_settings_dialog, 
+		0,
 		N_("Open the settings dialog box when GOK starts"),
 		NULL
 	},
 	{
 		"valuator-sensitivity", 
 		'\0', 
-		0,
-		G_OPTION_ARG_DOUBLE, 
+		POPT_ARG_DOUBLE, 
 		&gok_args.valuator_sensitivity, 
+		0,
 		N_("A multiplier to be applied to input device valuator events before processing"),
 		NULL
 	},
 
 	/* End the list */
-	{	NULL}
+	{NULL, '\0', 0, NULL, 0, NULL, NULL}
 };
 
 static int segfaults = 0;
@@ -348,7 +348,7 @@
 static void
 gok_args_init (GokArgs *args)
 {
-	/* initialize command line option storage */
+	/* initialize command line option (popt) storage */
 	args->accessmethodname = NULL;
 	args->inputdevicename = NULL;
 	args->mainkeyboardname = NULL;
@@ -536,7 +536,6 @@
 gok_main_open(gint argc, gchar *argv[])
 {
 	GnomeProgram *gok_program;
-	GOptionContext *context;
 
 	/* initialize member data */
 	m_pForegroundWindowAccessible = NULL;
@@ -547,13 +546,10 @@
 
 	gok_args_init (&gok_args);
 
-	context	= g_option_context_new (_("The GNOME On-screen Keyboard"));
-	g_option_context_add_main_entries (context, options, GETTEXT_PACKAGE);
-
 	/* Initialize Gnome */
 	gok_program = gnome_program_init (PACKAGE, VERSION,
 		LIBGNOMEUI_MODULE, argc, argv,
-		GNOME_PARAM_GOPTION_CONTEXT, context,
+		GNOME_PARAM_POPT_TABLE, options,
 		GNOME_PROGRAM_STANDARD_PROPERTIES,
 	        GNOME_PARAM_APP_DATADIR, DATADIR"/gok", 
 		LIBGNOMEUI_PARAM_CRASH_DIALOG, FALSE,
@@ -846,8 +842,6 @@
 	signal(SIGTERM, (void (*)(int))gok_sig_handler);
 	signal(SIGINT,  (void (*)(int))gok_sig_handler);
 
-	g_object_unref (gok_program);
-
 	return 0;
 }
 
