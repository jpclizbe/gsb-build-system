#!/bin/bash
## Version: 1.6 GSB Package SlackBuild.
## Copyright (c) 2007 Darren 'Tadgy' Austin <darren (at) gnomeslackbuild.org>
## Copyright (c) 2007 Steve Kennedy <sk238 (at) exeter.ac.uk>
##
## Licenced under the terms of the GNU General Public Licence version 3.
##

## Package variables.
BUILD=1
VERSION=svn_3509

## List any packages here that are required to build this package.
## The list is space seperated and case sensitive.
REQUIRED_PACKAGES="libnl wpa_supplicant libgcrypt dbus hal gtk+2 libglade gnome-keyring libgnomeui gnome-keyring wireless-tools glib2 iproute2 GConf gnome-common ppp perl"

## Build variables.
ARCH=${ARCH:-i586}
TUNE=${TUNE:-i586}
DISTRO=${DISTRO:-slackware}
TMP=${TMP:-/tmp}
PKGDEST=${PKGDEST:-$TMP}

## Script variables.
PKGNAME=$(basename $0 .SlackBuild)
PKG=$TMP/package-$PKGNAME
CWD=$(pwd)
NOCLEANUP=0
FORCEBUILD=0

## Usage.
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  --force       The package will not be built if a package of the same
                        name is already installed, or any of the packages
                        required to build are missing.  This option over-rides
                        these checks and attempts a build anyway.
          --no-cleanup  By default any temporary source, build and package
                        directories will be deleted once the package is built.
                        This option prevents those files from being removed.
          --help        Show this help screen.
EOF
}

## Parse command line arguments.
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ] || [ "$1" = "--force" ]; then
    FORCEBUILD=1
    shift
  elif [ "$1" = "-no-cleanup" ] || [ "$1" = "--no-cleanup" ]; then
    NOCLEANUP=1
    shift
  elif [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

## Package requirements and installation checks.
[ "$FORCEBUILD" = "0" ] && {
  function check_installed() {
    ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    return $?
  }

  check_installed "$PKGNAME" && {
    echo "${0##*/}: Remove installed '$PKGNAME' package before build."
    exit 1
  }

  for REQ in $REQUIRED_PACKAGES; do
    check_installed "$REQ" || {
      echo "${0##*/}: Required package '$REQ' not installed."
      exit 1
    }
  done
}

## SVN warning
echo
echo "*********************************************************************"
echo "*** Warning: This package is built from a fixed svn source revision."
echo "*********************************************************************"

## Temporary space and package storage.
mkdir -p $TMP
rm -rf $PKG
mkdir -p $PKG
mkdir -p $PKG/install
mkdir -p $PKGDEST

## Copy SVN sources to temporary space
cd $TMP &&
rm -rf $PKGNAME-$VERSION &&
cp -ar $CWD/$PKGNAME $PKGNAME-$VERSION &&
cd $PKGNAME-$VERSION || exit 1

# Apply ARCH specific patches.
if [ "$ARCH" = "i386" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i486" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i586" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i686" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "x86_64" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "powerpc" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
fi

## Fix permissions for building.
chown -R root.root .
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;

## Configure, Tuning, GCC and Make options.
CONFIGURE_FLAGS=${GSB_CONFIGURE_FLAGS:-""}
if [ "$ARCH" = "i386" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH -mtune=$TUNE"}
elif [ "$ARCH" = "i486" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH -mtune=$TUNE"}
elif [ "$ARCH" = "i586" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$ARCH -mtune=$TUNE -pipe -fomit-frame-pointer"}
elif [ "$ARCH" = "i686" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$ARCH -mtune=$TUNE -pipe -fomit-frame-pointer"}
elif [ "$ARCH" = "x86_64" ]; then
  if [ "$TUNE" = "k8" -o "$TUNE" = "opteron" -o "$TUNE" = "athlon64" -o "$TUNE" = "athlon-fx" ]; then
    TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$TUNE -mtune=$TUNE -pipe -fomit-frame-pointer -fPIC"}
  else
    TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=k8 -mtune=k8 -pipe -fomit-frame-pointer -fPIC"}
  fi
  [ -z "$CONFIGURE_FLAGS" ] && {
    CONFIGURE_FLAGS=""
  }
elif [ "$ARCH" = "powerpc" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH"}
else
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2"}
fi
EXTRA_CFLAGS=${GSB_EXTRA_CFLAGS:-""}
MAKE_FLAGS=${GSB_MAKE_FLAGS:-""}

## Disable -Werror from any gcc options.
## As this is svn sources there will be warnings, but the build shouldn't fail.
sed -i configure.in -e 's/-Werror//g' || exit 1

## There is an incomplete aclocal autoconfiguration info for pilot-link.
## The autogen will fail if we don't move this out of the way first.
[ -f /usr/share/aclocal/pilot-link.m4 ] && {
  mv -f /usr/share/aclocal/pilot-link.m4 /usr/share/aclocal/pilot-link.m4.old
}

## Fix for svn r3217
## pptp vpn-daemon has faulty configure.in which needs to be
## refreshed before we start autogen for the whole tree.
#echo "${0##*/}: Warning: Apply autoconf fix for r3217."
#sed -i ./vpn-daemons/pptp/configure.in -e 's/AC\_OUTPUT//g' || exit 1
#sed -i ./vpn-daemons/pptp/configure.in -e 's/AC\_CONFIG\_FILES/AC\_OUTPUT/g' || exit 1
#cd vpn-daemons/pptp && NOCONFIGURE=1 ./autogen.sh || exit 1;

## Configure.
cd $TMP/$PKGNAME-$VERSION &&
CFLAGS="$TUNE_CFLAGS $EXTRA_CFLAGS" CXXFLAGS="$TUNE_CFLAGS $EXTRA_CFLAGS" \
  ./autogen.sh --prefix=/usr --sysconfdir=/etc --localstatedir=/var/lib \
  $CONFIGURE_FLAGS --target=$ARCH-$DISTRO-linux \
  --disable-static --enable-shared \
  --with-distro=slackware \
  --with-mdns-provider=avahi \
  --with-ip=/sbin/ip \
  --with-dbus-sys=/etc/dbus-1/system.d \
  --enable-notification-icon \
  || exit 1

##
## This skirts an issue with dbus-glib <= 0.74 not supporting namespaces properly
## Cf: http://mail.gnome.org/archives/networkmanager-list/2008-March/msg00003.html
echo "WARNING: Fixing namespaces for $VERSION" ;
cp $CWD/spec-to-introspect.xsl .
mkdir introspection-dirty
mv -f introspection/nm-*.xml introspection-dirty
for i in introspection-dirty/*.xml
do
  xsltproc spec-to-introspect.xsl $i \
  | perl -pe '$$hash = chr(35);s{xmlns:tp="http://telepathy\.freedesktop\.org/wiki/DbusSpec$${hash}extensions-v0"} {}g' \
  >  introspection/$(basename $i)
done

## Build and install.
make &&
make DESTDIR=$PKG install || exit 1

## Add wpa_supplicant dbus support
mkdir -p $PKG/usr/share/dbus-1/services &&
cp $CWD/fi.epitest.hostap.WPASupplicant.service $PKG/usr/share/dbus-1/services || exit 1

## Restore pilot-link.m4
[ -f /usr/share/aclocal/pilot-link.m4.old ] && {
  mv /usr/share/aclocal/pilot-link.m4.old /usr/share/aclocal/pilot-link.m4
}

## Tweaks for library paths on x86_64 platforms 
# These are needed to correct the annoying "library has moved" warnings.
# on x86_64 platforms.
if [ "$ARCH" = "x86_64" ]; then
    mv $PKG/usr/lib $PKG/usr/lib64;
    for i in $PKG/usr/lib64/*.la ; do
      sed -i "s:\/lib\/:\/lib64\/:g" $i;
      sed -i "s:usr/lib':usr/lib64':g" $i ;
    done;
    for i in $PKG/usr/lib64/pkgconfig/*.pc ; do
      sed -i "/^libdir/s/\/lib/\/lib64/g" $i;
    done;
fi;

## Preserve previous settings
rm $PKG/etc/rc.d/rc.networkmanager &&
cp $CWD/rc.networkmanager $PKG/etc/rc.d/rc.networkmanager.new && 
mv $PKG/etc/rc.d/rc.networkmanager-dispatcher $PKG/etc/rc.d/rc.networkmanager-dispatcher.new || exit 1

## Fix for Slackware non-PAM system.
## Users now can add themselves to the "netdev" group to use networkmanager.
sed -i "s/at_console=\"true\"/group=\"netdev\"/g" $PKG/etc/dbus-1/system.d/NetworkManager.conf

## Strip debugging symbols.
{ find $PKG | xargs file | egrep "executable|shared object" | grep "ELF" | \
  cut -d: -f1 | xargs strip --strip-unneeded ; } 2>/dev/null

## Compress and fix manpage links.
[ -e $PKG/usr/share/man ] && {
  find $PKG/usr/share/man -type f -name \*.? -exec gzip -9f {} \;
  find $PKG/usr/share/man -type l -name \*.? -printf \
    "( cd '%h'; [ -e '%l.gz' ] &&
     { rm -f '%f'; ln -sf '%l.gz' '%f.gz'; } );\n" | bash
}

## Deal with .info files.
[ -e $PKG/usr/info ] && {
  rm -f $PKG/usr/info/dir
  gzip -9 $PKG/usr/info/*.info
}

## Package meta files
for FILE in doinst.sh slack-desc slack-required slack-conflicts slack-suggests
do
  [ -e $CWD/$FILE ] && {
    cat $CWD/$FILE >>$PKG/install/$FILE
  }
done

## Create full package with vpn support
cd $PKG
makepkg -p -l y -c n $PKGDEST/$PKGNAME-${VERSION//-/_}-$ARCH-$BUILD.tgz

## Cleanup
[ "$NOCLEANUP" = "0" ] && {
  rm -rf $PKG $TMP/$PKGNAME-$VERSION
}
