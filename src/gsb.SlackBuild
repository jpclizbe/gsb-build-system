#!/bin/bash
# Version: 1.1 GSB.
# Copyright (c) 2007 Darren 'Tadgy' Austin <darren (at) gnomeslackbuild.org>
#
# Licenced under the terms of the GNU General Public Licence version 3.
#

# Usage.
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  -force	The package will not be built if a package of the same
			name is already installed, or any of the packages
			required to build are missing.  This option over-rides
			these checks and attempts a build anyway.
	  -no-cleanup	By default any temporary source, build and package
			directories will be deleted once the package is built.
			This option prevents those files from being removed.
	  -no-install	Build the packages but don't install them.  This should
			only be used for testing individual SlackBuilds as it
			WILL cause serious problems - some package builds may
			rely on another package being auto installed first.
          -update       This switch will make the build script test each package
                        version as defined in the SlackBuild script against the
                        currently installed package.  If there is a difference,
                        the script will remove, rebuild, and reinstall the 
                        package. It cannot be used with the -force switch.
	  -help		Show this help screen.

	Options are passed down to the next level SlackBuild where appropriate.
EOF
}

# If the user created an options file, read it.
[ -r ./gsb.options ] && {
  . ./gsb.options
  export OPTIONSREAD=1
}

# Environment.
export TMP=${TMP:-/tmp}
export LOGSDIR=${GSB_LOGSDIR:-$TMP/gsb-buildlogs}

# Parse command line arguments.
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ]; then
    if [ "$UPDATE" = "1" ]; then
       echo "${0#*/}: The switches -force and -update are mutually exclusive."
       exit 1;
    fi;
    FORCE=1
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -force"
    shift
  elif [ "$1" = "-no-cleanup" ]; then
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -no-cleanup"
    shift
  elif [ "$1" = "-no-install" ]; then
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -no-install"
    shift
  elif [ "$1" = "-update" ]; then
    if [ "$FORCE" = "1" ]; then
       echo "${0#*/}: The switches -force and -update are mutually exclusive."
       exit 1;
    fi;
    UPDATE=1
    SLACKBUILD_ARGS="$SLACKBUILD_ARGS -update"
    shift
  elif [ "$1" = "-help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

# Temporary space and log file storage.
mkdir -p $TMP
mkdir -p $LOGSDIR

# Make sure /usr/include/db.h points to the db4 header.
( cd /usr/include
  rm -f db.h
  ln -s db4/db.h db.h )

# Do the build.
echo
echo "*************************************************"
echo "** Building GSB"
echo "*************************************************"
GSB_PWD=$(pwd)
for SECTION in tools libraries platform desktop applications accessibility \
                 bindings office mono extras themes compiz
do
  cd $GSB_PWD || exit 1
  echo
  echo "*************************************************"
  echo "**** Building section: $SECTION"
  echo "*************************************************"
  if [ ! -d $SECTION ]; then
     echo "Cannot find section $SECTION.";
     exit 1;
  else
   cd ${GSB_PWD}/${SECTION} || break 
  ./gsb.$SECTION.SlackBuild $SLACKBUILD_ARGS || break
  fi;
done

echo
echo "*************************************************"
echo "** Finished building GSB"
echo "*************************************************"
