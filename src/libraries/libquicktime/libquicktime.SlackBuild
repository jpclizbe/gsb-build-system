#!/bin/bash
## Version: 1.3 GSB SlackBuild
## Copyright (c) 2007 Darren 'Tadgy' Austin <darren (at) gnomeslackbuild.org>
## Copyright (c) 2007 Steve Kennedy <sk238 (at) exeter.ac.uk>
##
## Licenced under the terms of the GNU General Public Licence version 3.
##

## Package variables
BUILD=1
VERSION=1.0.0

## List any packages here that are required to build this package.
## The list is space seperated and case sensitive.

REQUIRED_PACKAGES="alsa-lib glib2 gtk+2 lame libogg libpng libvorbis ffmpeg faad2 libjpeg libdv"

## Build variables
ARCH=${ARCH:-i586}
TUNE=${TUNE:-i586}
DISTRO=${DISTRO:-slackware}
TMP=${TMP:-/tmp}
PKGDEST=${PKGDEST:-$TMP/gsb-packages}

## Script variables
PKGNAME=$(basename $0 .SlackBuild)
PKG=$TMP/package-$PKGNAME
CWD=$(pwd)
NOCLEANUP=0
FORCEBUILD=0

## Usage
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  -force        The package will not be built if a package of the same
                        name is already installed, or any of the packages
                        required to build are missing.  This option over-rides
                        these checks and attempts a build anyway.
          -no-cleanup   By default any temporary source, build and package
                        directories will be deleted once the package is built.
                        This option prevents those files from being removed.
          -help         Show this help screen.
EOF
}

## Parse command line arguments
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ]; then
    FORCEBUILD=1
    shift
  elif [ "$1" = "-no-cleanup" ]; then
    NOCLEANUP=1
    shift
  elif [ "$1" = "-help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

## Package requirements and installation checks
[ "$FORCEBUILD" = "0" ] && {
  function check_installed() {
    ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    return $?
  }

  check_installed "$PKGNAME" && {
    echo "${0##*/}: Remove installed '$PKGNAME' package before build."
    exit 1
  }

  for REQ in $REQUIRED_PACKAGES; do
    check_installed "$REQ" || {
      echo "${0##*/}: Required package '$REQ' not installed."
      exit 1
    }
  done
}

## Temporary space and package storage
mkdir -p $TMP
rm -rf $PKG
mkdir -p $PKG
mkdir -p $PKG/install
mkdir -p $PKGDEST

## Decompress archive
cd $TMP &&
tar xzf $CWD/${PKGNAME}-${VERSION}.tar.gz &&
cd $PKGNAME-$VERSION || exit 1

# Apply ARCH specific patches
if [ "$ARCH" = "i386" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i486" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i586" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i686" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "x86_64" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "powerpc" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
fi

## Fix permissions for building
chown -R root.root .
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;

##
## Configure, Tuning and Make options
##
## Options for Make.  If you have a SMP system or dual cores
## you may want to insert -j4 to allow paralell builds.
MAKE_FLAGS=""

## Any additional flags to pass to the configure scripts.
CONFIGURE_FLAGS=""

if [ "$ARCH" = "i386" ]; then
  GSB_CFLAGS=${GSB_CFLAGS:-"-O2 -march=$ARCH -mtune=i386"}
elif [ "$ARCH" = "i486" ]; then
  GSB_CFLAGS=${GSB_CFLAGS:-"-O2 -march=$ARCH -mtune=i486"}
elif [ "$ARCH" = "i586" ]; then
  GSB_CFLAGS=${GSB_CFLAGS:-"-O3 -pipe -fomit-frame-pointer -ffast-math -march=$ARCH -mtune=$TUNE -funroll-all-loops -fomit-frame-pointer  -finline-functions"}
elif [ "$ARCH" = "i686" ]; then
  TUNE=${TUNE:-i686}
  GSB_CFLAGS=${GSB_CFLAGS:-"-O3 -pipe -fomit-frame-pointer -ffast-math -march=$ARCH -mtune=$TUNE -funroll-all-loops -fomit-frame-pointer  -finline-functions"}
elif [ "$ARCH" = "x86_64" ]; then
  if [ "$TUNE" = "" -o "$TUNE" = "i586" ]; then
        echo "You must specify a specific tune with $ARCH. See gcc manual for tuning options." ;
        exit 1
  else
        GSB_CFLAGS=${GSB_CFLAGS:-"-O3 -pipe -fomit-frame-pointer -ffast-math -fPIC -march=$TUNE -mtune=$TUNE"}
        MAKE_FLAGS=${MAKE_FLAGS:-"-j4"}
        CONFIGURE_FLAGS="$CONFIGURE_FLAGS --libdir=/usr/lib64"
  fi;
elif [ "$ARCH" = "powerpc" ]; then
  GSB_CFLAGS=${GSB_CFLAGS:-"-O2"}
else
  GSB_CFLAGS=${GSB_CFLAGS:-"-O2"}
fi

## Configure, build and install
##

CFLAGS="$GSB_CFLAGS $CFLAGS" \
CXXFLAGS="$GSB_CFLAGS $CFLAGS" \
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var/lib \
  $CONFIGURE_FLAGS --target=$ARCH-$DISTRO-linux \
  --disable-static --enable-shared \
  --enable-gpl \
  --with-cpuflags="$GSB_CFLAGS" \
  || exit 1

##
## Make
##
make &&
make DESTDIR=$PKG install || exit 1

## Strip debugging symbols
{ find $PKG | xargs file | egrep "executable|shared object" | grep "ELF" | \
  cut -d: -f1 | xargs strip --strip-unneeded ; } 2>/dev/null

## Compress and fix manpage links
[ -e $PKG/usr/man ] && {
  find $PKG/usr/man -type f -name \*.? -exec gzip -9f {} \;
  find $PKG/usr/man -type l -name \*.? -printf \
    "( cd '%h'; [ -e '%l.gz' ] &&
     { rm -f '%f'; ln -sf '%l.gz' '%f.gz'; } );\n" | bash
}

## Deal with .info files
[ -e $PKG/usr/info ] && {
  rm -f $PKG/usr/info/dir
  gzip -9 $PKG/usr/info/*.info
}

## Copy extra documentation into package
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -a \
  AUTHORS COPYING* ChangeLog NEWS README \
  $PKG/usr/doc/$PKGNAME-$VERSION
find $PKG/usr/doc/$PKGNAME-$VERSION/ -type f -exec chmod 644 {} \;
chown -R root:root $PKG/usr/doc/$PKGNAME-$VERSION

## Package meta files
for FILE in slack-desc slack-required slack-conflicts slack-suggests doinst.sh
do
  [ -e $CWD/$FILE ] && {
    cat $CWD/$FILE >>$PKG/install/$FILE
  }
done

## Create the package
cd $PKG
makepkg -p -l y -c n $PKGDEST/$PKGNAME-$VERSION-$ARCH-$BUILD.tgz

## Cleanup
[ "$NOCLEANUP" = "0" ] && {
  rm -rf $PKG $TMP/$PKGNAME-$VERSION
}
