#!/bin/sh

##
## SVN Warning
##

cat << EOF

*****************
* Update Notice *
*****************

ffmpeg is built from an svn repository.  There are no released tarballs.
If you would like the latest code for this package, please make sure to
run "svn update" before compiling.  This build script will not update
the repository automatically (in case specific revisions are wanted.)

***** Note ************

This script is intended to be run from a working svn copy.

***********************

EOF

##
## Package Variables
##

PKGNAME=`basename $0 .SlackBuild`
CWD=`pwd`
TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAME
PKG_DEST=/home/packages
SVN_REV=`(cd $PKGNAME && svn info 2> /dev/null | grep Revision | cut -d' ' -f2)`
VERSION=${VERSION:-svn_$SVN_REV}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-1}
DISTRO=${DISTRO:-slackware}

## Installation Check
if [ -f /var/log/packages/${PKGNAME}-${VERSION}-${ARCH}-${BUILD} ]; then
  echo "${PKGNAME}-${VERSION}-${ARCH}-${BUILD} package already installed"
  exit 0
fi

##
## Temporary Space
##
if [ ! -d $TMP ]; then
  mkdir -p $TMP 
fi
rm -rf $PKG
mkdir -p $PKG

##
## Build Options
##

if [ "$ARCH" = "i386" ]; then
  GSB_CFLAGS="-O4 -march=i386 -mtune=i386"
  ARCH_CONFIGURE=""
elif [ "$ARCH" = "i486" ]; then
  GSB_CFLAGS="-O4 -march=i486 -mtune=i486"
  ARCH_CONFIGURE=""
elif [ "$ARCH" = "i686" ]; then
  GSB_CFLAGS="-O4 -march=i686 -mtune=i686 -pipe -fomit-frame-pointer -ffast-math"
  ARCH_CONFIGURE=""
elif [ "$ARCH" = "powerpc" ]; then
  GSB_CFLAGS="-O4"
  ARCH_CONFIGURE=""
elif [ "$ARCH" = "x86_64" ]; then
  GSB_CFLAGS="-O4 -fPIC -pipe -fomit-frame-pointer -ffast-math"
  ARCH_CONFIGURE="--enable-pic"
fi

## Decompress archive
cd $TMP 
echo "Cleaning old copy."
rm -fr $TMP/$PKGNAME-$VERSION
echo "Copying work repository to build area."
cp -r $CWD/$PKGNAME $TMP/$PKGNAME-$VERSION
cd $PKGNAME-$VERSION

# Apply $ARCH specific patches
if [ "$ARCH" = "i386" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i486" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i686" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "s390" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "powerpc" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "x86_64" ]; then
  echo "Applying patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
fi

##
## Fix permissions for building
##
chown -R root.root .
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;


##
## Run Configure and Build
##
## Add any local configuration options here.

echo "Be patient while configure runs."
CFLAGS="$GSB_CFLAGS" \
CXXFLAGS="$GSB_CFLAGS" \
./configure --prefix=/usr \
            $ARCH_CONFIGURE \
            --enable-shared \
	    --enable-gtk --enable-pthread \
	    || exit 1    

make || exit 1
make install DESTDIR=$PKG


##
## x86_64 library tweaks
##
if [ "$ARCH" = "x86_64" ]; then
	mv $PKG/usr/lib $PKG/usr/lib64
	rm $PKG/usr/lib64/*.a
else
	rm $PKG/usr/lib/*.a;
fi;

## Install Extra Documentation
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -a \
  AUTHORS COPYING* \
  $PKG/usr/doc/$PKGNAME-$VERSION
find $PKG/usr/doc/$PKGNAME-$VERSION/ -type f -exec chmod 644 {} \;

##
##  Permissions
##
chown -R $(stat --format "%u:%g" /usr/sbin) $PKG/usr/bin
chown -R root.root $PKG/usr/doc/$PKGNAME-$VERSION/*

##
## Strip Debugging Info
##
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

##
## Compress and Link Manpages
##
if [ -d $PKG/usr/man ]; then
  ( cd $PKG/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

##
## Slackware Package Information
##
mkdir -p $PKG/install
if [ -e $CWD/slack-required ]; then
        cat $CWD/slack-required > $PKG/install/slack-required
fi;

if [ -e $CWD/slack-desc ]; then
        cat $CWD/slack-desc > $PKG/install/slack-desc
fi;

if [ -e $CWD/doinst.sh ]; then
        cat $CWD/doinst.sh > $PKG/install/doinst.sh
fi;


##
## Make Slackware Package
##
cd $PKG
makepkg -l y -c n $PKG_DEST/$PKGNAME-$VERSION-$ARCH-$BUILD.tgz

##
## Cleanup If Wanted
##
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP/$PKGNAME-$VERSION
  rm -rf $PKG
fi
