<!-- ##### SECTION Title ##### -->
GtkUniqueApp

<!-- ##### SECTION Short_Description ##### -->
Base class for single instance applications

<!-- ##### SECTION Long_Description ##### -->
<para>#GtkUniqueApp is the base class for creating single instance
applications.</para>

<para>You should create a new #GtkUniqueApp and check whether there is
another instance with the same name running using
gtk_unique_app_is_running().  If none is running, you can go on with the
usual application initialization sequence.  If another instance is running,
instead, you can send it a message using gtk_unique_app_send_message() or
one of its wrapper functions and then exit.</para>

<para>A typical #GtkUniqueApp based application is shown in the
example:</para>

<example>
<title>Using <structname>GtkUniqueApp</structname>.</title>
<programlisting>
  static GtkUniqueResponse
  app_message_cb (GtkUniqueApp *app,
                  GtkUniqueCommand  command,
                  const gchar      *command_data,
                  const gchar      *startup_id,
                  GdkScreen        *screen,
                  guint             workspace,
                  gpointer          user_data)
  {
    GtkWidget *main_window = GTK_WINDOW (user_data);

    switch (command)
      {
      case GTK_UNIQUE_NEW:
        /* create a new window, set the parent */
        break;
      case GTK_UNIQUE_ACTIVATE:
        /* move the main window to the screen and call
         * gtk_window_present()
         */
        break;
      case GTK_UNIQUE_OPEN:
        /* unhandled */
        return GTK_UNIQUE_RESPONSE_CANCEL;
      default:
        /* error */
        return GTK_UNIQUE_RESPONSE_ABORT;
      }

    return GTK_UNIQUE_RESPONSE_OK;
  }

  int
  main (int argc, char *argv)
  {
    GtkUniqueApp *app;

    gtk_init (&amp;argc, &amp;argv);

    app = gtk_unique_app_new ("org.gnome.MyApplication");
    if (gtk_unique_app_is_running (app))
      {
        /* this will send a message to the running instance */
        GtkUniqueResponse response;

        response = gtk_unique_app_send_message (app, GTK_UNIQUE_ACTIVATE);
        exit (response == GTK_UNIQUE_RESPONSE_OK);
      }
    else
      {
        /* continue the loading of you application */
        GtkWidget *main_window;
  
        main_window = create_main_window ();
        gtk_unique_app_add_window (app, GTK_WINDOW (main_window));
        gtk_widget_show_all (main_window);

        g_signal_connect (app, "message",
                          G_CALLBACK (app_message_cb),
                          main_window);
      }

    gtk_main ();

    g_object_unref (app);

    return 0;
  }
</programlisting>
</example>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GtkUniqueApp ##### -->
<para>
The #GtkUniqueApp structure contains only private data and should not be
directly accessed.
</para>


<!-- ##### SIGNAL GtkUniqueApp::message ##### -->
<para>

</para>

@app: the object that received the signal
@command:
@command_data:
@startup_id:
@screen:
@workspace:
@Returns:

<!-- ##### ARG GtkUniqueApp:name ##### -->
<para>

</para>

<!-- ##### ARG GtkUniqueApp:screen ##### -->
<para>

</para>

<!-- ##### ARG GtkUniqueApp:startup-id ##### -->
<para>

</para>

<!-- ##### ARG GtkUniqueApp:workspace ##### -->
<para>

</para>

<!-- ##### STRUCT GtkUniqueAppClass ##### -->
<para>

</para>

@parent_class: 
@message: 
@_gtk_unique1: 
@_gtk_unique2: 
@_gtk_unique3: 
@_gtk_unique4: 

<!-- ##### ENUM GtkUniqueCommand ##### -->
<para>
The available commands for gtk_unique_app_send_command().
</para>

@GTK_UNIQUE_ACTIVATE: Bring the application upfront (mostly using gtk_window_present())
@GTK_UNIQUE_NEW: Create a new window
@GTK_UNIQUE_OPEN: Open a document
@GTK_UNIQUE_CUSTOM: Custom command
@GTK_UNIQUE_INVALID: Reserved for debug and internal usage

<!-- ##### ENUM GtkUniqueResponse ##### -->
<para>
The available responses for gtk_unique_app_send_command().
</para>

@GTK_UNIQUE_RESPONSE_OK: The command was successfully executed
@GTK_UNIQUE_RESPONSE_CANCEL: The command was cancelled by the user
@GTK_UNIQUE_RESPONSE_ABORT: The command was cancelled by the system
@GTK_UNIQUE_RESPONSE_FAIL: The command was not sent due to a communication
failure; this is used internally and should not be used by applications
@GTK_UNIQUE_RESPONSE_INVALID: Reserved for debug and internal usage

<!-- ##### FUNCTION gtk_unique_app_new ##### -->
<para>

</para>

@name: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_new_with_id ##### -->
<para>

</para>

@name: 
@startup_id: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_is_running ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_add_window ##### -->
<para>

</para>

@app: 
@window: 


<!-- ##### FUNCTION gtk_unique_app_remove_window ##### -->
<para>

</para>

@app: 
@window: 


<!-- ##### FUNCTION gtk_unique_app_list_windows ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_send_message ##### -->
<para>

</para>

@app: 
@command: 
@data: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_activate ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_new_document ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gtk_unique_app_open_uri ##### -->
<para>

</para>

@app: 
@uri: 
@Returns: 


