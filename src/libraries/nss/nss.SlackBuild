#!/bin/bash
## Version: 1.6 GSB Package SlackBuild.
## Copyright (c) 2007 Darren 'Tadgy' Austin <darren (at) gnomeslackbuild.org>
## Copyright (c) 2007 Steve Kennedy <sk238 (at) exeter.ac.uk>
##
## Licenced under the terms of the GNU General Public Licence version 3.
##

## Package variables.
BUILD=1
VERSION=3.12.3
NSPR="nspr-4.7.4"

## List any packages here that are required to build this package.
## The list is space seperated and case sensitive.
REQUIRED_PACKAGES=""

## Build variables.
ARCH=${ARCH:-i586}
TUNE=${TUNE:-i586}
DISTRO=${DISTRO:-slackware}
TMP=${TMP:-/tmp}
PKGDEST=${PKGDEST:-$TMP}

## Script variables.
PKGNAME=$(basename $0 .SlackBuild)
PKG=$TMP/package-$PKGNAME
CWD=$(pwd)
NOCLEANUP=0
FORCEBUILD=0

## Usage.
function usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:  --force       The package will not be built if a package of the same
                        name is already installed, or any of the packages
                        required to build are missing.  This option over-rides
                        these checks and attempts a build anyway.
          --no-cleanup  By default any temporary source, build and package
                        directories will be deleted once the package is built.
                        This option prevents those files from being removed.
          --help        Show this help screen.
EOF
}

## Parse command line arguments.
while [ $# -gt 0 ]; do
  if [ "$1" = "-force" ] || [ "$1" = "--force" ]; then
    FORCEBUILD=1
    shift
  elif [ "$1" = "-no-cleanup" ] || [ "$1" = "--no-cleanup" ]; then
    NOCLEANUP=1
    shift
  elif [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
  else
    echo "${0##*/}: Unknown option: $1"
    exit 1
  fi
done

## Package requirements and installation checks.
[ "$FORCEBUILD" = "0" ] && {
  function check_installed() {
    ls -1 /var/log/packages | grep "^${1}-[^-]*-[^-]*-[^-]*$" >/dev/null 2>&1
    return $?
  }

  check_installed "$PKGNAME" && {
    echo "${0##*/}: Remove installed '$PKGNAME' package before build."
    exit 1
  }

  for REQ in $REQUIRED_PACKAGES; do
    check_installed "$REQ" || {
      echo "${0##*/}: Required package '$REQ' not installed."
      exit 1
    }
  done
}

## Temporary space and package storage.
mkdir -p $TMP
rm -rf $PKG
mkdir -p $PKG
mkdir -p $PKG/install
mkdir -p $PKGDEST

## Decompress archive.
rm -fr $PKGNAME-$VERSION;
cd $TMP &&
tar xfj $CWD/$PKGNAME-$VERSION.tar.bz2 &&
tar xfz $CWD/$NSPR.tar.gz &&
cp -r $NSPR/mozilla $PKGNAME-$VERSION &&
rm -fr $TMP/$NSPR &&
cd $PKGNAME-$VERSION || exit 1

# Apply ARCH specific patches.
if [ "$ARCH" = "i386" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i486" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i586" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "i686" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "x86_64" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
elif [ "$ARCH" = "powerpc" ]; then
  echo "${0##*/}: Applying any patches for $ARCH"
  #cat $CWD/patches/foo.patch | patch -p0 --verbose
fi

## Fix permissions for building.
chown -R root.root .
find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;

## Configure, Tuning, GCC and Make options.
CONFIGURE_FLAGS=${GSB_CONFIGURE_FLAGS:-""}
if [ "$ARCH" = "i386" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH -mtune=$TUNE"}
elif [ "$ARCH" = "i486" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH -mtune=$TUNE"}
elif [ "$ARCH" = "i586" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$ARCH -mtune=$TUNE -pipe -fomit-frame-pointer"}
elif [ "$ARCH" = "i686" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$ARCH -mtune=$TUNE -pipe -fomit-frame-pointer"}

elif [ "$ARCH" = "x86_64" ]; then


  if [ "$TUNE" = "k8" -o "$TUNE" = "opteron" -o "$TUNE" = "athlon64" -o "$TUNE" = "athlon-fx" ]; then
    TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=$TUNE -mtune=$TUNE -pipe -fomit-frame-pointer -fPIC"}
  else
    TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O3 -march=k8 -mtune=k8 -pipe -fomit-frame-pointer -fPIC"}
  fi
  [ -z "$CONFIGURE_FLAGS" ] && {
    CONFIGURE_FLAGS="--libdir=/usr/lib64"
  }
elif [ "$ARCH" = "powerpc" ]; then
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2 -march=$ARCH"}
else
  TUNE_CFLAGS=${GSB_TUNE_CFLAGS:-"-O2"}
fi
EXTRA_CFLAGS=${GSB_EXTRA_CFLAGS:-""}
MAKE_FLAGS=${GSB_MAKE_FLAGS:-""}

## Build and Install

cd mozilla;

## This variable is set because many of the commands are dependent on knowing 
## the full path of certain directories. WORKINGDIR establishes a known path 
## so that all others can be determined relative to this.
WORKINGDIR=$PWD;
echo "Working from $WORKINGDIR."


## This variable is set so that the build is performed with no debugging symbols 
## built into the binaries and that the default compiler optimizations are used.
export BUILD_OPT=1;

## Default to lib on x86 platforms, but lib64 on x86_64
if [ "$ARCH" = "x86_64" ]; then
    NSSLIBDIR=lib64
    ##
    ## Required Make Flags for x86_64
    ##
    export USE_64=1
    export MAKE_FLAGS="USE_64=1"
    echo $MAKE_FLAGS;
else
    NSSLIBDIR=lib;
fi;

cd security/nss ;

## Build and install.
export NS_USE_GCC=1
export NSS_USE_SYSTEM_SQLITE=1
CFLAGS="$TUNE_CFLAGS $EXTRA_CFLAGS" CXXFLAGS="$TUNE_CFLAGS $EXTRA_CFLAGS" \
   make nss_build_all || exit 1;

cd ../../;

NSS_LINUXDIR=`basename $(ls -d $WORKINGDIR/dist/Linux*) 1`;

echo "Installing from $NSS_LINUXDIR."

mkdir -p $PKG/usr/bin
mkdir -p $PKG/usr/include

install -v -m755 -d $PKG/usr/$NSSLIBDIR/pkgconfig ;

sed -e "s:@LIBDIR@:$NSSLIBDIR:g" $CWD/pkgconfig/nspr.pc > \
       $PKG/usr/$NSSLIBDIR/pkgconfig/nspr.pc || exit 1

sed -e "s:@LIBDIR@:$NSSLIBDIR:g" $CWD/pkgconfig/nss.pc > \
       $PKG/usr/$NSSLIBDIR/pkgconfig/nss.pc  || exit 1

chmod 644 $PKG/usr/$NSSLIBDIR/pkgconfig/nspr.pc
chmod 644 $PKG/usr/$NSSLIBDIR/pkgconfig/nss.pc
chown root:root $PKG/usr/$NSSLIBDIR/pkgconfig/nspr.pc
chown root:root $PKG/usr/$NSSLIBDIR/pkgconfig/nss.pc
mkdir -p $PKG/usr/bin
install -v -m755 $CWD/pkgconfig/nss-config $PKG/usr/bin &&
install -v -m755 $CWD/pkgconfig/nspr-config $PKG/usr/bin || exit 1

cd dist ;

install -v -m755 $NSS_LINUXDIR/lib/*.so $PKG/usr/$NSSLIBDIR &&
install -v -m644 $NSS_LINUXDIR/lib/{*.chk,libcrmf.a} $PKG/usr/$NSSLIBDIR &&
install -v -m755 -d $PKG/usr/include/{nss,nspr} &&
install -v -m644 {public,private}/nss/* $PKG/usr/include/nss || exit 1
install -v -m755 $NSS_LINUXDIR/bin/{certutil,cmsutil,crlutil,modutil,pk12util,signtool,signver,ssltap,addbuiltin} $PKG/usr/bin || exit 1

cp -v -RL $NSS_LINUXDIR/include/* $PKG/usr/include/nspr &&
chmod -v 644 $PKG/usr/include/nspr/prvrsion.h || exit 1

## End of Build and Install;

## Strip debugging symbols.
{ find $PKG | xargs file | egrep "executable|shared object" | grep "ELF" | \
  cut -d: -f1 | xargs strip --strip-unneeded ; } 2>/dev/null

## Compress and fix manpage links.
[ -e $PKG/usr/man ] && {
  find $PKG/usr/man -type f -name \*.? -exec gzip -9f {} \;
  find $PKG/usr/man -type l -name \*.? -printf \
    "( cd '%h'; [ -e '%l.gz' ] &&
     { rm -f '%f'; ln -sf '%l.gz' '%f.gz'; } );\n" | bash
}

## Package meta files
for FILE in doinst.sh slack-desc slack-required slack-conflicts slack-suggests
do
  [ -e $CWD/$FILE ] && {
    cat $CWD/$FILE >>$PKG/install/$FILE
  }
done

## Create the package
cd $PKG
makepkg -p -l y -c n $PKGDEST/$PKGNAME-${VERSION//-/_}-$ARCH-$BUILD.tgz

## Cleanup
[ "$NOCLEANUP" = "0" ] && {
  rm -rf $PKG $TMP/$PKGNAME-$VERSION
}
